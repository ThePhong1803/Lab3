/*
 * button.c
 *
 *  Created on: Oct 25, 2022
 *      Author: PC
 */


#include "input_reading.h"
// we aim to work with more than one buttons
#define NO_OF_BUTTONS 1
// timer interrupt duration is 10ms , so to pass 1 second ,
// we need to jump to the interrupt service routine 100 time
#define DURATION_FOR_AUTO_INCREASING 	100
#define BUTTON_IS_PRESSED 				GPIO_PIN_RESET
#define BUTTON_IS_RELEASED 				GPIO_PIN_SET


// we define 4-stage buffers for debouncing
static GPIO_PinState debounceButtonBuffer1[NO_OF_BUTTONS];
static GPIO_PinState debounceButtonBuffer2[NO_OF_BUTTONS];
static GPIO_PinState debounceButtonBuffer3[NO_OF_BUTTONS];
static GPIO_PinState debounceButtonBuffer4[NO_OF_BUTTONS];
// we define a flag for a button pressed more than 1 second .
static uint8_t flagForButtonPress1s[NO_OF_BUTTONS];
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];

GPIO_TypeDef buttonPort[NO_OF_BUTTONS] = {Button0, Button1, Button2};
uint16_t = {button0_Pin, Button1_Pin, Button2_Pin;

void initButton(){
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++){
		buttonBuffer[i]  			= BUTTON_IS_RELEASED;
		debounceButtonBuffer1[i] 	= BUTTON_IS_RELEASED;
		debounceButtonBuffer2[i] 	= BUTTON_IS_RELEASED;
		flagForButtonPress1s[i] 	= 0;
		counterForButtonPress1s[i] 	= 0;
	}
}

void button_reading (void) {
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++){
		//propagate buffer stage 2 to stage 3
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
		//propagate buffer stage 1 to stage 2
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
		//update the lasted button state in buffer 1
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
	}
}

unsigned char is_button_pressed(unsigned char index){
	if(index >= NO_OF_BUTTONS) return 0;
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
}

unsigned char is_button_pressed_1s(unsigned char index){
	if(index >= NO_OF_BUTTONS) return 0;
	return (flagForButtonPress1s[index]);
}
