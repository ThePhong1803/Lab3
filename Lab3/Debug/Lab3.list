
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003168  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003274  08003274  00013274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003294  08003294  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  08003294  08003294  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003294  08003294  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003294  08003294  00013294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003298  08003298  00013298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  0800329c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000004c  080032e8  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  080032e8  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b25  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c9c  00000000  00000000  00029b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  0002b838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  0002c350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170b0  00000000  00000000  0002cd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb5d  00000000  00000000  00043e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082563  00000000  00000000  0005095d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2ec0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b4c  00000000  00000000  000d2f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000004c 	.word	0x2000004c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800325c 	.word	0x0800325c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000050 	.word	0x20000050
 8000148:	0800325c 	.word	0x0800325c

0800014c <display7SEG1>:


#include "7SegmentDisplay.h"
#include "global.h"

void display7SEG1(int num){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(num == 0){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	d10c      	bne.n	8000174 <display7SEG1+0x28>
		LED7PORT -> ODR |= 0x00ff;
 800015a:	4b51      	ldr	r3, [pc, #324]	; (80002a0 <display7SEG1+0x154>)
 800015c:	68db      	ldr	r3, [r3, #12]
 800015e:	4a50      	ldr	r2, [pc, #320]	; (80002a0 <display7SEG1+0x154>)
 8000160:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000164:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0xff40;
 8000166:	4b4e      	ldr	r3, [pc, #312]	; (80002a0 <display7SEG1+0x154>)
 8000168:	68da      	ldr	r2, [r3, #12]
 800016a:	494d      	ldr	r1, [pc, #308]	; (80002a0 <display7SEG1+0x154>)
 800016c:	f64f 7340 	movw	r3, #65344	; 0xff40
 8000170:	4013      	ands	r3, r2
 8000172:	60cb      	str	r3, [r1, #12]
	}
	if(num == 1){
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	2b01      	cmp	r3, #1
 8000178:	d10c      	bne.n	8000194 <display7SEG1+0x48>
		LED7PORT -> ODR |= 0x00ff;
 800017a:	4b49      	ldr	r3, [pc, #292]	; (80002a0 <display7SEG1+0x154>)
 800017c:	68db      	ldr	r3, [r3, #12]
 800017e:	4a48      	ldr	r2, [pc, #288]	; (80002a0 <display7SEG1+0x154>)
 8000180:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000184:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0xff79;
 8000186:	4b46      	ldr	r3, [pc, #280]	; (80002a0 <display7SEG1+0x154>)
 8000188:	68da      	ldr	r2, [r3, #12]
 800018a:	4945      	ldr	r1, [pc, #276]	; (80002a0 <display7SEG1+0x154>)
 800018c:	f64f 7379 	movw	r3, #65401	; 0xff79
 8000190:	4013      	ands	r3, r2
 8000192:	60cb      	str	r3, [r1, #12]
	}
	if(num == 2){
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	2b02      	cmp	r3, #2
 8000198:	d10c      	bne.n	80001b4 <display7SEG1+0x68>
		LED7PORT -> ODR |= 0x00ff;
 800019a:	4b41      	ldr	r3, [pc, #260]	; (80002a0 <display7SEG1+0x154>)
 800019c:	68db      	ldr	r3, [r3, #12]
 800019e:	4a40      	ldr	r2, [pc, #256]	; (80002a0 <display7SEG1+0x154>)
 80001a0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80001a4:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0xff24;
 80001a6:	4b3e      	ldr	r3, [pc, #248]	; (80002a0 <display7SEG1+0x154>)
 80001a8:	68da      	ldr	r2, [r3, #12]
 80001aa:	493d      	ldr	r1, [pc, #244]	; (80002a0 <display7SEG1+0x154>)
 80001ac:	f64f 7324 	movw	r3, #65316	; 0xff24
 80001b0:	4013      	ands	r3, r2
 80001b2:	60cb      	str	r3, [r1, #12]
	}
	if(num == 3){
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	2b03      	cmp	r3, #3
 80001b8:	d10c      	bne.n	80001d4 <display7SEG1+0x88>
		LED7PORT -> ODR |= 0x00ff;
 80001ba:	4b39      	ldr	r3, [pc, #228]	; (80002a0 <display7SEG1+0x154>)
 80001bc:	68db      	ldr	r3, [r3, #12]
 80001be:	4a38      	ldr	r2, [pc, #224]	; (80002a0 <display7SEG1+0x154>)
 80001c0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80001c4:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0xff30;
 80001c6:	4b36      	ldr	r3, [pc, #216]	; (80002a0 <display7SEG1+0x154>)
 80001c8:	68da      	ldr	r2, [r3, #12]
 80001ca:	4935      	ldr	r1, [pc, #212]	; (80002a0 <display7SEG1+0x154>)
 80001cc:	f64f 7330 	movw	r3, #65328	; 0xff30
 80001d0:	4013      	ands	r3, r2
 80001d2:	60cb      	str	r3, [r1, #12]
	}
	if(num == 4){
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2b04      	cmp	r3, #4
 80001d8:	d10c      	bne.n	80001f4 <display7SEG1+0xa8>
		LED7PORT -> ODR |= 0x00ff;
 80001da:	4b31      	ldr	r3, [pc, #196]	; (80002a0 <display7SEG1+0x154>)
 80001dc:	68db      	ldr	r3, [r3, #12]
 80001de:	4a30      	ldr	r2, [pc, #192]	; (80002a0 <display7SEG1+0x154>)
 80001e0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80001e4:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0xff19;
 80001e6:	4b2e      	ldr	r3, [pc, #184]	; (80002a0 <display7SEG1+0x154>)
 80001e8:	68da      	ldr	r2, [r3, #12]
 80001ea:	492d      	ldr	r1, [pc, #180]	; (80002a0 <display7SEG1+0x154>)
 80001ec:	f64f 7319 	movw	r3, #65305	; 0xff19
 80001f0:	4013      	ands	r3, r2
 80001f2:	60cb      	str	r3, [r1, #12]
	}
	if(num == 5){
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2b05      	cmp	r3, #5
 80001f8:	d10c      	bne.n	8000214 <display7SEG1+0xc8>
		LED7PORT -> ODR |= 0x00ff;
 80001fa:	4b29      	ldr	r3, [pc, #164]	; (80002a0 <display7SEG1+0x154>)
 80001fc:	68db      	ldr	r3, [r3, #12]
 80001fe:	4a28      	ldr	r2, [pc, #160]	; (80002a0 <display7SEG1+0x154>)
 8000200:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000204:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0xff12;
 8000206:	4b26      	ldr	r3, [pc, #152]	; (80002a0 <display7SEG1+0x154>)
 8000208:	68da      	ldr	r2, [r3, #12]
 800020a:	4925      	ldr	r1, [pc, #148]	; (80002a0 <display7SEG1+0x154>)
 800020c:	f64f 7312 	movw	r3, #65298	; 0xff12
 8000210:	4013      	ands	r3, r2
 8000212:	60cb      	str	r3, [r1, #12]
	}
	if(num == 6){
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	2b06      	cmp	r3, #6
 8000218:	d10c      	bne.n	8000234 <display7SEG1+0xe8>
		LED7PORT -> ODR |= 0x00ff;
 800021a:	4b21      	ldr	r3, [pc, #132]	; (80002a0 <display7SEG1+0x154>)
 800021c:	68db      	ldr	r3, [r3, #12]
 800021e:	4a20      	ldr	r2, [pc, #128]	; (80002a0 <display7SEG1+0x154>)
 8000220:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000224:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0xff02;
 8000226:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <display7SEG1+0x154>)
 8000228:	68da      	ldr	r2, [r3, #12]
 800022a:	491d      	ldr	r1, [pc, #116]	; (80002a0 <display7SEG1+0x154>)
 800022c:	f64f 7302 	movw	r3, #65282	; 0xff02
 8000230:	4013      	ands	r3, r2
 8000232:	60cb      	str	r3, [r1, #12]
	}
	if(num == 7){
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b07      	cmp	r3, #7
 8000238:	d10c      	bne.n	8000254 <display7SEG1+0x108>
		LED7PORT -> ODR |= 0x00ff;
 800023a:	4b19      	ldr	r3, [pc, #100]	; (80002a0 <display7SEG1+0x154>)
 800023c:	68db      	ldr	r3, [r3, #12]
 800023e:	4a18      	ldr	r2, [pc, #96]	; (80002a0 <display7SEG1+0x154>)
 8000240:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000244:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0xff78;
 8000246:	4b16      	ldr	r3, [pc, #88]	; (80002a0 <display7SEG1+0x154>)
 8000248:	68da      	ldr	r2, [r3, #12]
 800024a:	4915      	ldr	r1, [pc, #84]	; (80002a0 <display7SEG1+0x154>)
 800024c:	f64f 7378 	movw	r3, #65400	; 0xff78
 8000250:	4013      	ands	r3, r2
 8000252:	60cb      	str	r3, [r1, #12]
	}
	if(num == 8){
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2b08      	cmp	r3, #8
 8000258:	d10c      	bne.n	8000274 <display7SEG1+0x128>
		LED7PORT -> ODR |= 0x00ff;
 800025a:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <display7SEG1+0x154>)
 800025c:	68db      	ldr	r3, [r3, #12]
 800025e:	4a10      	ldr	r2, [pc, #64]	; (80002a0 <display7SEG1+0x154>)
 8000260:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000264:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0xff80;
 8000266:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <display7SEG1+0x154>)
 8000268:	68da      	ldr	r2, [r3, #12]
 800026a:	490d      	ldr	r1, [pc, #52]	; (80002a0 <display7SEG1+0x154>)
 800026c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000270:	4013      	ands	r3, r2
 8000272:	60cb      	str	r3, [r1, #12]
	}
	if(num == 9){
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2b09      	cmp	r3, #9
 8000278:	d10c      	bne.n	8000294 <display7SEG1+0x148>
		LED7PORT -> ODR |= 0x00ff;
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <display7SEG1+0x154>)
 800027c:	68db      	ldr	r3, [r3, #12]
 800027e:	4a08      	ldr	r2, [pc, #32]	; (80002a0 <display7SEG1+0x154>)
 8000280:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000284:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0xff90;
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <display7SEG1+0x154>)
 8000288:	68da      	ldr	r2, [r3, #12]
 800028a:	4905      	ldr	r1, [pc, #20]	; (80002a0 <display7SEG1+0x154>)
 800028c:	f64f 7390 	movw	r3, #65424	; 0xff90
 8000290:	4013      	ands	r3, r2
 8000292:	60cb      	str	r3, [r1, #12]
	}
}
 8000294:	bf00      	nop
 8000296:	370c      	adds	r7, #12
 8000298:	46bd      	mov	sp, r7
 800029a:	bc80      	pop	{r7}
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40010c00 	.word	0x40010c00

080002a4 <display7SEG2>:

void display7SEG2(int num){
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	if(num == 0){
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d10c      	bne.n	80002cc <display7SEG2+0x28>
		LED7PORT -> ODR |= 0xff00;
 80002b2:	4b51      	ldr	r3, [pc, #324]	; (80003f8 <display7SEG2+0x154>)
 80002b4:	68db      	ldr	r3, [r3, #12]
 80002b6:	4a50      	ldr	r2, [pc, #320]	; (80003f8 <display7SEG2+0x154>)
 80002b8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80002bc:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0x40ff;
 80002be:	4b4e      	ldr	r3, [pc, #312]	; (80003f8 <display7SEG2+0x154>)
 80002c0:	68da      	ldr	r2, [r3, #12]
 80002c2:	494d      	ldr	r1, [pc, #308]	; (80003f8 <display7SEG2+0x154>)
 80002c4:	f244 03ff 	movw	r3, #16639	; 0x40ff
 80002c8:	4013      	ands	r3, r2
 80002ca:	60cb      	str	r3, [r1, #12]
	}
	if(num == 1){
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d10c      	bne.n	80002ec <display7SEG2+0x48>
		LED7PORT -> ODR |= 0xff00;
 80002d2:	4b49      	ldr	r3, [pc, #292]	; (80003f8 <display7SEG2+0x154>)
 80002d4:	68db      	ldr	r3, [r3, #12]
 80002d6:	4a48      	ldr	r2, [pc, #288]	; (80003f8 <display7SEG2+0x154>)
 80002d8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80002dc:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0x79ff;
 80002de:	4b46      	ldr	r3, [pc, #280]	; (80003f8 <display7SEG2+0x154>)
 80002e0:	68da      	ldr	r2, [r3, #12]
 80002e2:	4945      	ldr	r1, [pc, #276]	; (80003f8 <display7SEG2+0x154>)
 80002e4:	f647 13ff 	movw	r3, #31231	; 0x79ff
 80002e8:	4013      	ands	r3, r2
 80002ea:	60cb      	str	r3, [r1, #12]
	}
	if(num == 2){
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2b02      	cmp	r3, #2
 80002f0:	d10c      	bne.n	800030c <display7SEG2+0x68>
		LED7PORT -> ODR |= 0xff00;
 80002f2:	4b41      	ldr	r3, [pc, #260]	; (80003f8 <display7SEG2+0x154>)
 80002f4:	68db      	ldr	r3, [r3, #12]
 80002f6:	4a40      	ldr	r2, [pc, #256]	; (80003f8 <display7SEG2+0x154>)
 80002f8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80002fc:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0x24ff;
 80002fe:	4b3e      	ldr	r3, [pc, #248]	; (80003f8 <display7SEG2+0x154>)
 8000300:	68da      	ldr	r2, [r3, #12]
 8000302:	493d      	ldr	r1, [pc, #244]	; (80003f8 <display7SEG2+0x154>)
 8000304:	f242 43ff 	movw	r3, #9471	; 0x24ff
 8000308:	4013      	ands	r3, r2
 800030a:	60cb      	str	r3, [r1, #12]
	}
	if(num == 3){
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2b03      	cmp	r3, #3
 8000310:	d10c      	bne.n	800032c <display7SEG2+0x88>
		LED7PORT -> ODR |= 0xff00;
 8000312:	4b39      	ldr	r3, [pc, #228]	; (80003f8 <display7SEG2+0x154>)
 8000314:	68db      	ldr	r3, [r3, #12]
 8000316:	4a38      	ldr	r2, [pc, #224]	; (80003f8 <display7SEG2+0x154>)
 8000318:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800031c:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0x30ff;
 800031e:	4b36      	ldr	r3, [pc, #216]	; (80003f8 <display7SEG2+0x154>)
 8000320:	68da      	ldr	r2, [r3, #12]
 8000322:	4935      	ldr	r1, [pc, #212]	; (80003f8 <display7SEG2+0x154>)
 8000324:	f243 03ff 	movw	r3, #12543	; 0x30ff
 8000328:	4013      	ands	r3, r2
 800032a:	60cb      	str	r3, [r1, #12]
	}
	if(num == 4){
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2b04      	cmp	r3, #4
 8000330:	d10c      	bne.n	800034c <display7SEG2+0xa8>
		LED7PORT -> ODR |= 0xff00;
 8000332:	4b31      	ldr	r3, [pc, #196]	; (80003f8 <display7SEG2+0x154>)
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	4a30      	ldr	r2, [pc, #192]	; (80003f8 <display7SEG2+0x154>)
 8000338:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800033c:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0x19ff;
 800033e:	4b2e      	ldr	r3, [pc, #184]	; (80003f8 <display7SEG2+0x154>)
 8000340:	68da      	ldr	r2, [r3, #12]
 8000342:	492d      	ldr	r1, [pc, #180]	; (80003f8 <display7SEG2+0x154>)
 8000344:	f641 13ff 	movw	r3, #6655	; 0x19ff
 8000348:	4013      	ands	r3, r2
 800034a:	60cb      	str	r3, [r1, #12]
	}
	if(num == 5){
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2b05      	cmp	r3, #5
 8000350:	d10c      	bne.n	800036c <display7SEG2+0xc8>
		LED7PORT -> ODR |= 0xff00;
 8000352:	4b29      	ldr	r3, [pc, #164]	; (80003f8 <display7SEG2+0x154>)
 8000354:	68db      	ldr	r3, [r3, #12]
 8000356:	4a28      	ldr	r2, [pc, #160]	; (80003f8 <display7SEG2+0x154>)
 8000358:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800035c:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0x12ff;
 800035e:	4b26      	ldr	r3, [pc, #152]	; (80003f8 <display7SEG2+0x154>)
 8000360:	68da      	ldr	r2, [r3, #12]
 8000362:	4925      	ldr	r1, [pc, #148]	; (80003f8 <display7SEG2+0x154>)
 8000364:	f241 23ff 	movw	r3, #4863	; 0x12ff
 8000368:	4013      	ands	r3, r2
 800036a:	60cb      	str	r3, [r1, #12]
	}
	if(num == 6){
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	2b06      	cmp	r3, #6
 8000370:	d10c      	bne.n	800038c <display7SEG2+0xe8>
		LED7PORT -> ODR |= 0xff00;
 8000372:	4b21      	ldr	r3, [pc, #132]	; (80003f8 <display7SEG2+0x154>)
 8000374:	68db      	ldr	r3, [r3, #12]
 8000376:	4a20      	ldr	r2, [pc, #128]	; (80003f8 <display7SEG2+0x154>)
 8000378:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800037c:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0x02ff;
 800037e:	4b1e      	ldr	r3, [pc, #120]	; (80003f8 <display7SEG2+0x154>)
 8000380:	68da      	ldr	r2, [r3, #12]
 8000382:	491d      	ldr	r1, [pc, #116]	; (80003f8 <display7SEG2+0x154>)
 8000384:	f240 23ff 	movw	r3, #767	; 0x2ff
 8000388:	4013      	ands	r3, r2
 800038a:	60cb      	str	r3, [r1, #12]
	}
	if(num == 7){
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2b07      	cmp	r3, #7
 8000390:	d10c      	bne.n	80003ac <display7SEG2+0x108>
		LED7PORT -> ODR |= 0xff00;
 8000392:	4b19      	ldr	r3, [pc, #100]	; (80003f8 <display7SEG2+0x154>)
 8000394:	68db      	ldr	r3, [r3, #12]
 8000396:	4a18      	ldr	r2, [pc, #96]	; (80003f8 <display7SEG2+0x154>)
 8000398:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800039c:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0x78ff;
 800039e:	4b16      	ldr	r3, [pc, #88]	; (80003f8 <display7SEG2+0x154>)
 80003a0:	68da      	ldr	r2, [r3, #12]
 80003a2:	4915      	ldr	r1, [pc, #84]	; (80003f8 <display7SEG2+0x154>)
 80003a4:	f647 03ff 	movw	r3, #30975	; 0x78ff
 80003a8:	4013      	ands	r3, r2
 80003aa:	60cb      	str	r3, [r1, #12]
	}
	if(num == 8){
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2b08      	cmp	r3, #8
 80003b0:	d10c      	bne.n	80003cc <display7SEG2+0x128>
		LED7PORT -> ODR |= 0xff00;
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <display7SEG2+0x154>)
 80003b4:	68db      	ldr	r3, [r3, #12]
 80003b6:	4a10      	ldr	r2, [pc, #64]	; (80003f8 <display7SEG2+0x154>)
 80003b8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80003bc:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0x80ff;
 80003be:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <display7SEG2+0x154>)
 80003c0:	68da      	ldr	r2, [r3, #12]
 80003c2:	490d      	ldr	r1, [pc, #52]	; (80003f8 <display7SEG2+0x154>)
 80003c4:	f248 03ff 	movw	r3, #33023	; 0x80ff
 80003c8:	4013      	ands	r3, r2
 80003ca:	60cb      	str	r3, [r1, #12]
	}
	if(num == 9){
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	2b09      	cmp	r3, #9
 80003d0:	d10c      	bne.n	80003ec <display7SEG2+0x148>
		LED7PORT -> ODR |= 0xff00;
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <display7SEG2+0x154>)
 80003d4:	68db      	ldr	r3, [r3, #12]
 80003d6:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <display7SEG2+0x154>)
 80003d8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80003dc:	60d3      	str	r3, [r2, #12]
		LED7PORT -> ODR &= 0x90ff;
 80003de:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <display7SEG2+0x154>)
 80003e0:	68da      	ldr	r2, [r3, #12]
 80003e2:	4905      	ldr	r1, [pc, #20]	; (80003f8 <display7SEG2+0x154>)
 80003e4:	f249 03ff 	movw	r3, #37119	; 0x90ff
 80003e8:	4013      	ands	r3, r2
 80003ea:	60cb      	str	r3, [r1, #12]
	}
}
 80003ec:	bf00      	nop
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	40010c00 	.word	0x40010c00

080003fc <update7Segment>:
int * set1;
int * set2;

int led_index = 0;

void update7Segment(){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	if(isTimer0Expired()){
 8000400:	f001 fb82 	bl	8001b08 <isTimer0Expired>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d06f      	beq.n	80004ea <update7Segment+0xee>
		setTimer0(10);
 800040a:	200a      	movs	r0, #10
 800040c:	f001 fa6e 	bl	80018ec <setTimer0>
		switch (led_index) {
 8000410:	4b37      	ldr	r3, [pc, #220]	; (80004f0 <update7Segment+0xf4>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d002      	beq.n	800041e <update7Segment+0x22>
 8000418:	2b01      	cmp	r3, #1
 800041a:	d02e      	beq.n	800047a <update7Segment+0x7e>
				display7SEG2(*set2 / 10);
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
				break;
			default:
				break;
 800041c:	e05b      	b.n	80004d6 <update7Segment+0xda>
				LED7PORT->ODR = 0xffff;
 800041e:	4b35      	ldr	r3, [pc, #212]	; (80004f4 <update7Segment+0xf8>)
 8000420:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000424:	60da      	str	r2, [r3, #12]
				display7SEG1(*set1 % 10);
 8000426:	4b34      	ldr	r3, [pc, #208]	; (80004f8 <update7Segment+0xfc>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	681a      	ldr	r2, [r3, #0]
 800042c:	4b33      	ldr	r3, [pc, #204]	; (80004fc <update7Segment+0x100>)
 800042e:	fb83 1302 	smull	r1, r3, r3, r2
 8000432:	1099      	asrs	r1, r3, #2
 8000434:	17d3      	asrs	r3, r2, #31
 8000436:	1ac9      	subs	r1, r1, r3
 8000438:	460b      	mov	r3, r1
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	440b      	add	r3, r1
 800043e:	005b      	lsls	r3, r3, #1
 8000440:	1ad1      	subs	r1, r2, r3
 8000442:	4608      	mov	r0, r1
 8000444:	f7ff fe82 	bl	800014c <display7SEG1>
				display7SEG2(*set1 / 10);
 8000448:	4b2b      	ldr	r3, [pc, #172]	; (80004f8 <update7Segment+0xfc>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a2b      	ldr	r2, [pc, #172]	; (80004fc <update7Segment+0x100>)
 8000450:	fb82 1203 	smull	r1, r2, r2, r3
 8000454:	1092      	asrs	r2, r2, #2
 8000456:	17db      	asrs	r3, r3, #31
 8000458:	1ad3      	subs	r3, r2, r3
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff ff22 	bl	80002a4 <display7SEG2>
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000466:	4826      	ldr	r0, [pc, #152]	; (8000500 <update7Segment+0x104>)
 8000468:	f001 fecf 	bl	800220a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800046c:	2201      	movs	r2, #1
 800046e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000472:	4823      	ldr	r0, [pc, #140]	; (8000500 <update7Segment+0x104>)
 8000474:	f001 fec9 	bl	800220a <HAL_GPIO_WritePin>
				break;
 8000478:	e02d      	b.n	80004d6 <update7Segment+0xda>
				LED7PORT->ODR = 0xffff;
 800047a:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <update7Segment+0xf8>)
 800047c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000480:	60da      	str	r2, [r3, #12]
				display7SEG1(*set2 % 10);
 8000482:	4b20      	ldr	r3, [pc, #128]	; (8000504 <update7Segment+0x108>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <update7Segment+0x100>)
 800048a:	fb83 1302 	smull	r1, r3, r3, r2
 800048e:	1099      	asrs	r1, r3, #2
 8000490:	17d3      	asrs	r3, r2, #31
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	460b      	mov	r3, r1
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	440b      	add	r3, r1
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	1ad1      	subs	r1, r2, r3
 800049e:	4608      	mov	r0, r1
 80004a0:	f7ff fe54 	bl	800014c <display7SEG1>
				display7SEG2(*set2 / 10);
 80004a4:	4b17      	ldr	r3, [pc, #92]	; (8000504 <update7Segment+0x108>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a14      	ldr	r2, [pc, #80]	; (80004fc <update7Segment+0x100>)
 80004ac:	fb82 1203 	smull	r1, r2, r2, r3
 80004b0:	1092      	asrs	r2, r2, #2
 80004b2:	17db      	asrs	r3, r3, #31
 80004b4:	1ad3      	subs	r3, r2, r3
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff fef4 	bl	80002a4 <display7SEG2>
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80004bc:	2201      	movs	r2, #1
 80004be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004c2:	480f      	ldr	r0, [pc, #60]	; (8000500 <update7Segment+0x104>)
 80004c4:	f001 fea1 	bl	800220a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ce:	480c      	ldr	r0, [pc, #48]	; (8000500 <update7Segment+0x104>)
 80004d0:	f001 fe9b 	bl	800220a <HAL_GPIO_WritePin>
				break;
 80004d4:	bf00      	nop
		}
		led_index = (led_index + 1) % 2;
 80004d6:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <update7Segment+0xf4>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	3301      	adds	r3, #1
 80004dc:	2b00      	cmp	r3, #0
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	bfb8      	it	lt
 80004e4:	425b      	neglt	r3, r3
 80004e6:	4a02      	ldr	r2, [pc, #8]	; (80004f0 <update7Segment+0xf4>)
 80004e8:	6013      	str	r3, [r2, #0]
	}
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000068 	.word	0x20000068
 80004f4:	40010c00 	.word	0x40010c00
 80004f8:	200000c4 	.word	0x200000c4
 80004fc:	66666667 	.word	0x66666667
 8000500:	40010800 	.word	0x40010800
 8000504:	200000c0 	.word	0x200000c0

08000508 <setRedLed1>:
#define LED0_Pin       RED2_Pin
#define LED1_GPIO_Port YELLOW2_GPIO_Port
#define LED1_Pin       YELLOW2_Pin
#endif

void setRedLed1(){
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
#ifndef HARDWARE
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	2104      	movs	r1, #4
 8000510:	4807      	ldr	r0, [pc, #28]	; (8000530 <setRedLed1+0x28>)
 8000512:	f001 fe7a 	bl	800220a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000516:	2201      	movs	r2, #1
 8000518:	2110      	movs	r1, #16
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <setRedLed1+0x28>)
 800051c:	f001 fe75 	bl	800220a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8000520:	2201      	movs	r2, #1
 8000522:	2108      	movs	r1, #8
 8000524:	4802      	ldr	r0, [pc, #8]	; (8000530 <setRedLed1+0x28>)
 8000526:	f001 fe70 	bl	800220a <HAL_GPIO_WritePin>
#else
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, RESET);
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
#endif
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40010800 	.word	0x40010800

08000534 <setYellowLed1>:

void setYellowLed1(){
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
#ifndef HARDWARE
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000538:	2201      	movs	r2, #1
 800053a:	2104      	movs	r1, #4
 800053c:	4807      	ldr	r0, [pc, #28]	; (800055c <setYellowLed1+0x28>)
 800053e:	f001 fe64 	bl	800220a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000542:	2201      	movs	r2, #1
 8000544:	2110      	movs	r1, #16
 8000546:	4805      	ldr	r0, [pc, #20]	; (800055c <setYellowLed1+0x28>)
 8000548:	f001 fe5f 	bl	800220a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2108      	movs	r1, #8
 8000550:	4802      	ldr	r0, [pc, #8]	; (800055c <setYellowLed1+0x28>)
 8000552:	f001 fe5a 	bl	800220a <HAL_GPIO_WritePin>
#else
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, SET);
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
#endif
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40010800 	.word	0x40010800

08000560 <setGreenLed1>:

void setGreenLed1(){
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
#ifndef HARDWARE
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2104      	movs	r1, #4
 8000568:	4807      	ldr	r0, [pc, #28]	; (8000588 <setGreenLed1+0x28>)
 800056a:	f001 fe4e 	bl	800220a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	2110      	movs	r1, #16
 8000572:	4805      	ldr	r0, [pc, #20]	; (8000588 <setGreenLed1+0x28>)
 8000574:	f001 fe49 	bl	800220a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8000578:	2201      	movs	r2, #1
 800057a:	2108      	movs	r1, #8
 800057c:	4802      	ldr	r0, [pc, #8]	; (8000588 <setGreenLed1+0x28>)
 800057e:	f001 fe44 	bl	800220a <HAL_GPIO_WritePin>
#else
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, SET);
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
#endif
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40010800 	.word	0x40010800

0800058c <setRedLed2>:

void setRedLed2(){
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
#ifndef HARDWARE
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2120      	movs	r1, #32
 8000594:	4807      	ldr	r0, [pc, #28]	; (80005b4 <setRedLed2+0x28>)
 8000596:	f001 fe38 	bl	800220a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 800059a:	2201      	movs	r2, #1
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	4805      	ldr	r0, [pc, #20]	; (80005b4 <setRedLed2+0x28>)
 80005a0:	f001 fe33 	bl	800220a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2140      	movs	r1, #64	; 0x40
 80005a8:	4802      	ldr	r0, [pc, #8]	; (80005b4 <setRedLed2+0x28>)
 80005aa:	f001 fe2e 	bl	800220a <HAL_GPIO_WritePin>
#else
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, RESET);
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
#endif
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40010800 	.word	0x40010800

080005b8 <setYellowLed2>:

void setYellowLed2(){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
#ifndef HARDWARE
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2120      	movs	r1, #32
 80005c0:	4807      	ldr	r0, [pc, #28]	; (80005e0 <setYellowLed2+0x28>)
 80005c2:	f001 fe22 	bl	800220a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	4805      	ldr	r0, [pc, #20]	; (80005e0 <setYellowLed2+0x28>)
 80005cc:	f001 fe1d 	bl	800220a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2140      	movs	r1, #64	; 0x40
 80005d4:	4802      	ldr	r0, [pc, #8]	; (80005e0 <setYellowLed2+0x28>)
 80005d6:	f001 fe18 	bl	800220a <HAL_GPIO_WritePin>
#else
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, SET);
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
#endif
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40010800 	.word	0x40010800

080005e4 <setGreenLed2>:

void setGreenLed2(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
#ifndef HARDWARE
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2120      	movs	r1, #32
 80005ec:	4807      	ldr	r0, [pc, #28]	; (800060c <setGreenLed2+0x28>)
 80005ee:	f001 fe0c 	bl	800220a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2180      	movs	r1, #128	; 0x80
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <setGreenLed2+0x28>)
 80005f8:	f001 fe07 	bl	800220a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2140      	movs	r1, #64	; 0x40
 8000600:	4802      	ldr	r0, [pc, #8]	; (800060c <setGreenLed2+0x28>)
 8000602:	f001 fe02 	bl	800220a <HAL_GPIO_WritePin>
#else
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, SET);
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
#endif
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40010800 	.word	0x40010800

08000610 <toggleRed1>:


void toggleRed1(){
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 8000614:	2104      	movs	r1, #4
 8000616:	4802      	ldr	r0, [pc, #8]	; (8000620 <toggleRed1+0x10>)
 8000618:	f001 fe0f 	bl	800223a <HAL_GPIO_TogglePin>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40010800 	.word	0x40010800

08000624 <toggleYellow1>:
void toggleYellow1(){
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 8000628:	2108      	movs	r1, #8
 800062a:	4802      	ldr	r0, [pc, #8]	; (8000634 <toggleYellow1+0x10>)
 800062c:	f001 fe05 	bl	800223a <HAL_GPIO_TogglePin>
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40010800 	.word	0x40010800

08000638 <toggleGreen1>:
void toggleGreen1(){
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 800063c:	2110      	movs	r1, #16
 800063e:	4802      	ldr	r0, [pc, #8]	; (8000648 <toggleGreen1+0x10>)
 8000640:	f001 fdfb 	bl	800223a <HAL_GPIO_TogglePin>
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40010800 	.word	0x40010800

0800064c <toggleRed2>:
void toggleRed2(){
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 8000650:	2120      	movs	r1, #32
 8000652:	4802      	ldr	r0, [pc, #8]	; (800065c <toggleRed2+0x10>)
 8000654:	f001 fdf1 	bl	800223a <HAL_GPIO_TogglePin>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40010800 	.word	0x40010800

08000660 <toggleYellow2>:
void toggleYellow2(){
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 8000664:	2140      	movs	r1, #64	; 0x40
 8000666:	4802      	ldr	r0, [pc, #8]	; (8000670 <toggleYellow2+0x10>)
 8000668:	f001 fde7 	bl	800223a <HAL_GPIO_TogglePin>
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40010800 	.word	0x40010800

08000674 <toggleGreen2>:
void toggleGreen2(){
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 8000678:	2180      	movs	r1, #128	; 0x80
 800067a:	4802      	ldr	r0, [pc, #8]	; (8000684 <toggleGreen2+0x10>)
 800067c:	f001 fddd 	bl	800223a <HAL_GPIO_TogglePin>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40010800 	.word	0x40010800

08000688 <clearAllLed>:

void clearAllLed(){
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 800068c:	2201      	movs	r2, #1
 800068e:	2104      	movs	r1, #4
 8000690:	480e      	ldr	r0, [pc, #56]	; (80006cc <clearAllLed+0x44>)
 8000692:	f001 fdba 	bl	800220a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2110      	movs	r1, #16
 800069a:	480c      	ldr	r0, [pc, #48]	; (80006cc <clearAllLed+0x44>)
 800069c:	f001 fdb5 	bl	800220a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2108      	movs	r1, #8
 80006a4:	4809      	ldr	r0, [pc, #36]	; (80006cc <clearAllLed+0x44>)
 80006a6:	f001 fdb0 	bl	800220a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2120      	movs	r1, #32
 80006ae:	4807      	ldr	r0, [pc, #28]	; (80006cc <clearAllLed+0x44>)
 80006b0:	f001 fdab 	bl	800220a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2180      	movs	r1, #128	; 0x80
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <clearAllLed+0x44>)
 80006ba:	f001 fda6 	bl	800220a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	2140      	movs	r1, #64	; 0x40
 80006c2:	4802      	ldr	r0, [pc, #8]	; (80006cc <clearAllLed+0x44>)
 80006c4:	f001 fda1 	bl	800220a <HAL_GPIO_WritePin>
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40010800 	.word	0x40010800

080006d0 <fsm1_automatic_run>:
 */


#include "fsm_automatic.h"

void fsm1_automatic_run(){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	switch(status1){
 80006d4:	4bab      	ldr	r3, [pc, #684]	; (8000984 <fsm1_automatic_run+0x2b4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3b01      	subs	r3, #1
 80006da:	2b11      	cmp	r3, #17
 80006dc:	f200 81d8 	bhi.w	8000a90 <fsm1_automatic_run+0x3c0>
 80006e0:	a201      	add	r2, pc, #4	; (adr r2, 80006e8 <fsm1_automatic_run+0x18>)
 80006e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e6:	bf00      	nop
 80006e8:	08000731 	.word	0x08000731
 80006ec:	08000775 	.word	0x08000775
 80006f0:	080008d5 	.word	0x080008d5
 80006f4:	08000825 	.word	0x08000825
 80006f8:	08000a91 	.word	0x08000a91
 80006fc:	08000a91 	.word	0x08000a91
 8000700:	08000a91 	.word	0x08000a91
 8000704:	08000a91 	.word	0x08000a91
 8000708:	08000a91 	.word	0x08000a91
 800070c:	08000a91 	.word	0x08000a91
 8000710:	08000a91 	.word	0x08000a91
 8000714:	08000a91 	.word	0x08000a91
 8000718:	08000a91 	.word	0x08000a91
 800071c:	08000a91 	.word	0x08000a91
 8000720:	08000a91 	.word	0x08000a91
 8000724:	08000a91 	.word	0x08000a91
 8000728:	08000a91 	.word	0x08000a91
 800072c:	080009bd 	.word	0x080009bd
		case INIT:
			//TODO
			setRedLed1();
 8000730:	f7ff feea 	bl	8000508 <setRedLed1>
			status1 = AUTO_RED;
 8000734:	4b93      	ldr	r3, [pc, #588]	; (8000984 <fsm1_automatic_run+0x2b4>)
 8000736:	2202      	movs	r2, #2
 8000738:	601a      	str	r2, [r3, #0]
			lastState1 = status1;
 800073a:	4b92      	ldr	r3, [pc, #584]	; (8000984 <fsm1_automatic_run+0x2b4>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a92      	ldr	r2, [pc, #584]	; (8000988 <fsm1_automatic_run+0x2b8>)
 8000740:	6013      	str	r3, [r2, #0]
			setTimer1(red_duration1);
 8000742:	4b92      	ldr	r3, [pc, #584]	; (800098c <fsm1_automatic_run+0x2bc>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f001 f8e4 	bl	8001914 <setTimer1>
			setTimer3(100);
 800074c:	2064      	movs	r0, #100	; 0x64
 800074e:	f001 f909 	bl	8001964 <setTimer3>
			timeCountdown1 = red_duration1/100;
 8000752:	4b8e      	ldr	r3, [pc, #568]	; (800098c <fsm1_automatic_run+0x2bc>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a8e      	ldr	r2, [pc, #568]	; (8000990 <fsm1_automatic_run+0x2c0>)
 8000758:	fb82 1203 	smull	r1, r2, r2, r3
 800075c:	1152      	asrs	r2, r2, #5
 800075e:	17db      	asrs	r3, r3, #31
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	4a8c      	ldr	r2, [pc, #560]	; (8000994 <fsm1_automatic_run+0x2c4>)
 8000764:	6013      	str	r3, [r2, #0]
			set1 = &timeCountdown1;
 8000766:	4b8c      	ldr	r3, [pc, #560]	; (8000998 <fsm1_automatic_run+0x2c8>)
 8000768:	4a8a      	ldr	r2, [pc, #552]	; (8000994 <fsm1_automatic_run+0x2c4>)
 800076a:	601a      	str	r2, [r3, #0]
			mode = 1;
 800076c:	4b8b      	ldr	r3, [pc, #556]	; (800099c <fsm1_automatic_run+0x2cc>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
			break;
 8000772:	e196      	b.n	8000aa2 <fsm1_automatic_run+0x3d2>

		case AUTO_RED:
			//TODO
			setRedLed1();
 8000774:	f7ff fec8 	bl	8000508 <setRedLed1>
			mode = 1;
 8000778:	4b88      	ldr	r3, [pc, #544]	; (800099c <fsm1_automatic_run+0x2cc>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
			if(isTimer3Expired()){
 800077e:	f001 f9f9 	bl	8001b74 <isTimer3Expired>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d007      	beq.n	8000798 <fsm1_automatic_run+0xc8>
				setTimer3(100);
 8000788:	2064      	movs	r0, #100	; 0x64
 800078a:	f001 f8eb 	bl	8001964 <setTimer3>
				timeCountdown1--;
 800078e:	4b81      	ldr	r3, [pc, #516]	; (8000994 <fsm1_automatic_run+0x2c4>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	3b01      	subs	r3, #1
 8000794:	4a7f      	ldr	r2, [pc, #508]	; (8000994 <fsm1_automatic_run+0x2c4>)
 8000796:	6013      	str	r3, [r2, #0]
			}
			if(isTimer1Expired() == 1){
 8000798:	f001 f9c8 	bl	8001b2c <isTimer1Expired>
 800079c:	4603      	mov	r3, r0
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d114      	bne.n	80007cc <fsm1_automatic_run+0xfc>
				setTimer1(green_duration1);
 80007a2:	4b7f      	ldr	r3, [pc, #508]	; (80009a0 <fsm1_automatic_run+0x2d0>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 f8b4 	bl	8001914 <setTimer1>
				status1 = AUTO_GREEN;
 80007ac:	4b75      	ldr	r3, [pc, #468]	; (8000984 <fsm1_automatic_run+0x2b4>)
 80007ae:	2204      	movs	r2, #4
 80007b0:	601a      	str	r2, [r3, #0]
				setTimer3(100);
 80007b2:	2064      	movs	r0, #100	; 0x64
 80007b4:	f001 f8d6 	bl	8001964 <setTimer3>
				timeCountdown1 = green_duration1/100;
 80007b8:	4b79      	ldr	r3, [pc, #484]	; (80009a0 <fsm1_automatic_run+0x2d0>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a74      	ldr	r2, [pc, #464]	; (8000990 <fsm1_automatic_run+0x2c0>)
 80007be:	fb82 1203 	smull	r1, r2, r2, r3
 80007c2:	1152      	asrs	r2, r2, #5
 80007c4:	17db      	asrs	r3, r3, #31
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	4a72      	ldr	r2, [pc, #456]	; (8000994 <fsm1_automatic_run+0x2c4>)
 80007ca:	6013      	str	r3, [r2, #0]
			}

			if(isButtonPressed(0)){
 80007cc:	2000      	movs	r0, #0
 80007ce:	f000 fec7 	bl	8001560 <isButtonPressed>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	f000 815d 	beq.w	8000a94 <fsm1_automatic_run+0x3c4>
				clearAllLed();
 80007da:	f7ff ff55 	bl	8000688 <clearAllLed>
				lastState1 = status1;
 80007de:	4b69      	ldr	r3, [pc, #420]	; (8000984 <fsm1_automatic_run+0x2b4>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a69      	ldr	r2, [pc, #420]	; (8000988 <fsm1_automatic_run+0x2b8>)
 80007e4:	6013      	str	r3, [r2, #0]
				lastState2 = status2;
 80007e6:	4b6f      	ldr	r3, [pc, #444]	; (80009a4 <fsm1_automatic_run+0x2d4>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a6f      	ldr	r2, [pc, #444]	; (80009a8 <fsm1_automatic_run+0x2d8>)
 80007ec:	6013      	str	r3, [r2, #0]
				status1 = WAIT;
 80007ee:	4b65      	ldr	r3, [pc, #404]	; (8000984 <fsm1_automatic_run+0x2b4>)
 80007f0:	2212      	movs	r2, #18
 80007f2:	601a      	str	r2, [r3, #0]
				status2 = WAIT;
 80007f4:	4b6b      	ldr	r3, [pc, #428]	; (80009a4 <fsm1_automatic_run+0x2d4>)
 80007f6:	2212      	movs	r2, #18
 80007f8:	601a      	str	r2, [r3, #0]
				status3 = MODIFY_RED1;
 80007fa:	4b6c      	ldr	r3, [pc, #432]	; (80009ac <fsm1_automatic_run+0x2dc>)
 80007fc:	220c      	movs	r2, #12
 80007fe:	601a      	str	r2, [r3, #0]
				clearTimer1();
 8000800:	f001 f8d8 	bl	80019b4 <clearTimer1>
				clearTimer2();
 8000804:	f001 f8e6 	bl	80019d4 <clearTimer2>
				clearTimer3();
 8000808:	f001 f8f4 	bl	80019f4 <clearTimer3>
				clearTimer4();
 800080c:	f001 f902 	bl	8001a14 <clearTimer4>
				setTimer1(100);
 8000810:	2064      	movs	r0, #100	; 0x64
 8000812:	f001 f87f 	bl	8001914 <setTimer1>
				set1 = &time_input;
 8000816:	4b60      	ldr	r3, [pc, #384]	; (8000998 <fsm1_automatic_run+0x2c8>)
 8000818:	4a65      	ldr	r2, [pc, #404]	; (80009b0 <fsm1_automatic_run+0x2e0>)
 800081a:	601a      	str	r2, [r3, #0]
				set2 = &mode;
 800081c:	4b65      	ldr	r3, [pc, #404]	; (80009b4 <fsm1_automatic_run+0x2e4>)
 800081e:	4a5f      	ldr	r2, [pc, #380]	; (800099c <fsm1_automatic_run+0x2cc>)
 8000820:	601a      	str	r2, [r3, #0]
			}
			break;
 8000822:	e137      	b.n	8000a94 <fsm1_automatic_run+0x3c4>

		case AUTO_GREEN:
			//TODO
			mode = 1;
 8000824:	4b5d      	ldr	r3, [pc, #372]	; (800099c <fsm1_automatic_run+0x2cc>)
 8000826:	2201      	movs	r2, #1
 8000828:	601a      	str	r2, [r3, #0]
			setGreenLed1();
 800082a:	f7ff fe99 	bl	8000560 <setGreenLed1>
			if(isTimer3Expired()){
 800082e:	f001 f9a1 	bl	8001b74 <isTimer3Expired>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d007      	beq.n	8000848 <fsm1_automatic_run+0x178>
				setTimer3(100);
 8000838:	2064      	movs	r0, #100	; 0x64
 800083a:	f001 f893 	bl	8001964 <setTimer3>
				timeCountdown1--;
 800083e:	4b55      	ldr	r3, [pc, #340]	; (8000994 <fsm1_automatic_run+0x2c4>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	3b01      	subs	r3, #1
 8000844:	4a53      	ldr	r2, [pc, #332]	; (8000994 <fsm1_automatic_run+0x2c4>)
 8000846:	6013      	str	r3, [r2, #0]
			}
			if(isTimer1Expired() == 1){
 8000848:	f001 f970 	bl	8001b2c <isTimer1Expired>
 800084c:	4603      	mov	r3, r0
 800084e:	2b01      	cmp	r3, #1
 8000850:	d114      	bne.n	800087c <fsm1_automatic_run+0x1ac>
				setTimer1(yellow_duration1);
 8000852:	4b59      	ldr	r3, [pc, #356]	; (80009b8 <fsm1_automatic_run+0x2e8>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f001 f85c 	bl	8001914 <setTimer1>
				status1 = AUTO_YELLOW;
 800085c:	4b49      	ldr	r3, [pc, #292]	; (8000984 <fsm1_automatic_run+0x2b4>)
 800085e:	2203      	movs	r2, #3
 8000860:	601a      	str	r2, [r3, #0]
				setTimer3(100);
 8000862:	2064      	movs	r0, #100	; 0x64
 8000864:	f001 f87e 	bl	8001964 <setTimer3>
				timeCountdown1 = yellow_duration1/100;
 8000868:	4b53      	ldr	r3, [pc, #332]	; (80009b8 <fsm1_automatic_run+0x2e8>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a48      	ldr	r2, [pc, #288]	; (8000990 <fsm1_automatic_run+0x2c0>)
 800086e:	fb82 1203 	smull	r1, r2, r2, r3
 8000872:	1152      	asrs	r2, r2, #5
 8000874:	17db      	asrs	r3, r3, #31
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	4a46      	ldr	r2, [pc, #280]	; (8000994 <fsm1_automatic_run+0x2c4>)
 800087a:	6013      	str	r3, [r2, #0]
			}

			if(isButtonPressed(0)){
 800087c:	2000      	movs	r0, #0
 800087e:	f000 fe6f 	bl	8001560 <isButtonPressed>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	f000 8107 	beq.w	8000a98 <fsm1_automatic_run+0x3c8>
				clearAllLed();
 800088a:	f7ff fefd 	bl	8000688 <clearAllLed>
				lastState1 = status1;
 800088e:	4b3d      	ldr	r3, [pc, #244]	; (8000984 <fsm1_automatic_run+0x2b4>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a3d      	ldr	r2, [pc, #244]	; (8000988 <fsm1_automatic_run+0x2b8>)
 8000894:	6013      	str	r3, [r2, #0]
				lastState2 = status2;
 8000896:	4b43      	ldr	r3, [pc, #268]	; (80009a4 <fsm1_automatic_run+0x2d4>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a43      	ldr	r2, [pc, #268]	; (80009a8 <fsm1_automatic_run+0x2d8>)
 800089c:	6013      	str	r3, [r2, #0]
				status1 = WAIT;
 800089e:	4b39      	ldr	r3, [pc, #228]	; (8000984 <fsm1_automatic_run+0x2b4>)
 80008a0:	2212      	movs	r2, #18
 80008a2:	601a      	str	r2, [r3, #0]
				status2 = WAIT;
 80008a4:	4b3f      	ldr	r3, [pc, #252]	; (80009a4 <fsm1_automatic_run+0x2d4>)
 80008a6:	2212      	movs	r2, #18
 80008a8:	601a      	str	r2, [r3, #0]
				status3 = MODIFY_RED1;
 80008aa:	4b40      	ldr	r3, [pc, #256]	; (80009ac <fsm1_automatic_run+0x2dc>)
 80008ac:	220c      	movs	r2, #12
 80008ae:	601a      	str	r2, [r3, #0]
				clearTimer1();
 80008b0:	f001 f880 	bl	80019b4 <clearTimer1>
				clearTimer2();
 80008b4:	f001 f88e 	bl	80019d4 <clearTimer2>
				clearTimer3();
 80008b8:	f001 f89c 	bl	80019f4 <clearTimer3>
				clearTimer4();
 80008bc:	f001 f8aa 	bl	8001a14 <clearTimer4>
				setTimer1(100);
 80008c0:	2064      	movs	r0, #100	; 0x64
 80008c2:	f001 f827 	bl	8001914 <setTimer1>
				set1 = &time_input;
 80008c6:	4b34      	ldr	r3, [pc, #208]	; (8000998 <fsm1_automatic_run+0x2c8>)
 80008c8:	4a39      	ldr	r2, [pc, #228]	; (80009b0 <fsm1_automatic_run+0x2e0>)
 80008ca:	601a      	str	r2, [r3, #0]
				set2 = &mode;
 80008cc:	4b39      	ldr	r3, [pc, #228]	; (80009b4 <fsm1_automatic_run+0x2e4>)
 80008ce:	4a33      	ldr	r2, [pc, #204]	; (800099c <fsm1_automatic_run+0x2cc>)
 80008d0:	601a      	str	r2, [r3, #0]
			}
			break;
 80008d2:	e0e1      	b.n	8000a98 <fsm1_automatic_run+0x3c8>

		case AUTO_YELLOW:
			//TODO
			mode = 1;
 80008d4:	4b31      	ldr	r3, [pc, #196]	; (800099c <fsm1_automatic_run+0x2cc>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	601a      	str	r2, [r3, #0]
			setYellowLed1();
 80008da:	f7ff fe2b 	bl	8000534 <setYellowLed1>
			if(isTimer3Expired()){
 80008de:	f001 f949 	bl	8001b74 <isTimer3Expired>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d007      	beq.n	80008f8 <fsm1_automatic_run+0x228>
				setTimer3(100);
 80008e8:	2064      	movs	r0, #100	; 0x64
 80008ea:	f001 f83b 	bl	8001964 <setTimer3>
				timeCountdown1--;
 80008ee:	4b29      	ldr	r3, [pc, #164]	; (8000994 <fsm1_automatic_run+0x2c4>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	4a27      	ldr	r2, [pc, #156]	; (8000994 <fsm1_automatic_run+0x2c4>)
 80008f6:	6013      	str	r3, [r2, #0]
			}
			if(isTimer1Expired() == 1){
 80008f8:	f001 f918 	bl	8001b2c <isTimer1Expired>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d114      	bne.n	800092c <fsm1_automatic_run+0x25c>
				setTimer1(red_duration1);
 8000902:	4b22      	ldr	r3, [pc, #136]	; (800098c <fsm1_automatic_run+0x2bc>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f001 f804 	bl	8001914 <setTimer1>
				status1 = AUTO_RED;
 800090c:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <fsm1_automatic_run+0x2b4>)
 800090e:	2202      	movs	r2, #2
 8000910:	601a      	str	r2, [r3, #0]
				setTimer3(100);
 8000912:	2064      	movs	r0, #100	; 0x64
 8000914:	f001 f826 	bl	8001964 <setTimer3>
				timeCountdown1 = red_duration1/100;
 8000918:	4b1c      	ldr	r3, [pc, #112]	; (800098c <fsm1_automatic_run+0x2bc>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a1c      	ldr	r2, [pc, #112]	; (8000990 <fsm1_automatic_run+0x2c0>)
 800091e:	fb82 1203 	smull	r1, r2, r2, r3
 8000922:	1152      	asrs	r2, r2, #5
 8000924:	17db      	asrs	r3, r3, #31
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	4a1a      	ldr	r2, [pc, #104]	; (8000994 <fsm1_automatic_run+0x2c4>)
 800092a:	6013      	str	r3, [r2, #0]
			}

			if(isButtonPressed(0)){
 800092c:	2000      	movs	r0, #0
 800092e:	f000 fe17 	bl	8001560 <isButtonPressed>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	f000 80b1 	beq.w	8000a9c <fsm1_automatic_run+0x3cc>
				clearAllLed();
 800093a:	f7ff fea5 	bl	8000688 <clearAllLed>
				lastState1 = status1;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <fsm1_automatic_run+0x2b4>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a11      	ldr	r2, [pc, #68]	; (8000988 <fsm1_automatic_run+0x2b8>)
 8000944:	6013      	str	r3, [r2, #0]
				lastState2 = status2;
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <fsm1_automatic_run+0x2d4>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <fsm1_automatic_run+0x2d8>)
 800094c:	6013      	str	r3, [r2, #0]
				status1 = WAIT;
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <fsm1_automatic_run+0x2b4>)
 8000950:	2212      	movs	r2, #18
 8000952:	601a      	str	r2, [r3, #0]
				status2 = WAIT;
 8000954:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <fsm1_automatic_run+0x2d4>)
 8000956:	2212      	movs	r2, #18
 8000958:	601a      	str	r2, [r3, #0]
				status3 = MODIFY_RED1;
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <fsm1_automatic_run+0x2dc>)
 800095c:	220c      	movs	r2, #12
 800095e:	601a      	str	r2, [r3, #0]
				clearTimer1();
 8000960:	f001 f828 	bl	80019b4 <clearTimer1>
				clearTimer2();
 8000964:	f001 f836 	bl	80019d4 <clearTimer2>
				clearTimer3();
 8000968:	f001 f844 	bl	80019f4 <clearTimer3>
				clearTimer4();
 800096c:	f001 f852 	bl	8001a14 <clearTimer4>
				setTimer1(100);
 8000970:	2064      	movs	r0, #100	; 0x64
 8000972:	f000 ffcf 	bl	8001914 <setTimer1>
				set1 = &time_input;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <fsm1_automatic_run+0x2c8>)
 8000978:	4a0d      	ldr	r2, [pc, #52]	; (80009b0 <fsm1_automatic_run+0x2e0>)
 800097a:	601a      	str	r2, [r3, #0]
				set2 = &mode;
 800097c:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <fsm1_automatic_run+0x2e4>)
 800097e:	4a07      	ldr	r2, [pc, #28]	; (800099c <fsm1_automatic_run+0x2cc>)
 8000980:	601a      	str	r2, [r3, #0]
			}
			break;
 8000982:	e08b      	b.n	8000a9c <fsm1_automatic_run+0x3cc>
 8000984:	20000000 	.word	0x20000000
 8000988:	20000004 	.word	0x20000004
 800098c:	20000014 	.word	0x20000014
 8000990:	51eb851f 	.word	0x51eb851f
 8000994:	2000006c 	.word	0x2000006c
 8000998:	200000c4 	.word	0x200000c4
 800099c:	20000030 	.word	0x20000030
 80009a0:	2000001c 	.word	0x2000001c
 80009a4:	20000008 	.word	0x20000008
 80009a8:	2000000c 	.word	0x2000000c
 80009ac:	20000010 	.word	0x20000010
 80009b0:	2000002c 	.word	0x2000002c
 80009b4:	200000c0 	.word	0x200000c0
 80009b8:	20000018 	.word	0x20000018

		case WAIT:
			if(lastState1 == AUTO_RED && returnFlag1){
 80009bc:	4b3a      	ldr	r3, [pc, #232]	; (8000aa8 <fsm1_automatic_run+0x3d8>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d11e      	bne.n	8000a02 <fsm1_automatic_run+0x332>
 80009c4:	4b39      	ldr	r3, [pc, #228]	; (8000aac <fsm1_automatic_run+0x3dc>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d01a      	beq.n	8000a02 <fsm1_automatic_run+0x332>
				clearAllLed();
 80009cc:	f7ff fe5c 	bl	8000688 <clearAllLed>
				status1 = lastState1;
 80009d0:	4b35      	ldr	r3, [pc, #212]	; (8000aa8 <fsm1_automatic_run+0x3d8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a36      	ldr	r2, [pc, #216]	; (8000ab0 <fsm1_automatic_run+0x3e0>)
 80009d6:	6013      	str	r3, [r2, #0]
				returnFlag1 = 0;
 80009d8:	4b34      	ldr	r3, [pc, #208]	; (8000aac <fsm1_automatic_run+0x3dc>)
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
				setTimer3(100);
 80009de:	2064      	movs	r0, #100	; 0x64
 80009e0:	f000 ffc0 	bl	8001964 <setTimer3>
				setTimer1(red_duration1);
 80009e4:	4b33      	ldr	r3, [pc, #204]	; (8000ab4 <fsm1_automatic_run+0x3e4>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 ff93 	bl	8001914 <setTimer1>
				timeCountdown1 = red_duration1/100;
 80009ee:	4b31      	ldr	r3, [pc, #196]	; (8000ab4 <fsm1_automatic_run+0x3e4>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a31      	ldr	r2, [pc, #196]	; (8000ab8 <fsm1_automatic_run+0x3e8>)
 80009f4:	fb82 1203 	smull	r1, r2, r2, r3
 80009f8:	1152      	asrs	r2, r2, #5
 80009fa:	17db      	asrs	r3, r3, #31
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	4a2f      	ldr	r2, [pc, #188]	; (8000abc <fsm1_automatic_run+0x3ec>)
 8000a00:	6013      	str	r3, [r2, #0]
			}
			if(lastState1 == AUTO_GREEN && returnFlag1){
 8000a02:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <fsm1_automatic_run+0x3d8>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b04      	cmp	r3, #4
 8000a08:	d11e      	bne.n	8000a48 <fsm1_automatic_run+0x378>
 8000a0a:	4b28      	ldr	r3, [pc, #160]	; (8000aac <fsm1_automatic_run+0x3dc>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d01a      	beq.n	8000a48 <fsm1_automatic_run+0x378>
				returnFlag1 = 0;
 8000a12:	4b26      	ldr	r3, [pc, #152]	; (8000aac <fsm1_automatic_run+0x3dc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
				status1 = lastState1;
 8000a18:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <fsm1_automatic_run+0x3d8>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a24      	ldr	r2, [pc, #144]	; (8000ab0 <fsm1_automatic_run+0x3e0>)
 8000a1e:	6013      	str	r3, [r2, #0]
				clearAllLed();
 8000a20:	f7ff fe32 	bl	8000688 <clearAllLed>
				setTimer3(100);
 8000a24:	2064      	movs	r0, #100	; 0x64
 8000a26:	f000 ff9d 	bl	8001964 <setTimer3>
				setTimer1(green_duration1);
 8000a2a:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <fsm1_automatic_run+0x3f0>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 ff70 	bl	8001914 <setTimer1>
				timeCountdown1 = green_duration1/100;
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <fsm1_automatic_run+0x3f0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a1f      	ldr	r2, [pc, #124]	; (8000ab8 <fsm1_automatic_run+0x3e8>)
 8000a3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a3e:	1152      	asrs	r2, r2, #5
 8000a40:	17db      	asrs	r3, r3, #31
 8000a42:	1ad3      	subs	r3, r2, r3
 8000a44:	4a1d      	ldr	r2, [pc, #116]	; (8000abc <fsm1_automatic_run+0x3ec>)
 8000a46:	6013      	str	r3, [r2, #0]
			}
			if(lastState1 == AUTO_YELLOW && returnFlag1) {
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <fsm1_automatic_run+0x3d8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b03      	cmp	r3, #3
 8000a4e:	d127      	bne.n	8000aa0 <fsm1_automatic_run+0x3d0>
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <fsm1_automatic_run+0x3dc>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d023      	beq.n	8000aa0 <fsm1_automatic_run+0x3d0>
				returnFlag1 = 0;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <fsm1_automatic_run+0x3dc>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
				status1 = lastState1;
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <fsm1_automatic_run+0x3d8>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a13      	ldr	r2, [pc, #76]	; (8000ab0 <fsm1_automatic_run+0x3e0>)
 8000a64:	6013      	str	r3, [r2, #0]
				clearAllLed();
 8000a66:	f7ff fe0f 	bl	8000688 <clearAllLed>
				setTimer3(100);
 8000a6a:	2064      	movs	r0, #100	; 0x64
 8000a6c:	f000 ff7a 	bl	8001964 <setTimer3>
				setTimer1(yellow_duration1);
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <fsm1_automatic_run+0x3f4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 ff4d 	bl	8001914 <setTimer1>
				timeCountdown1 = yellow_duration1/100;
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <fsm1_automatic_run+0x3f4>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <fsm1_automatic_run+0x3e8>)
 8000a80:	fb82 1203 	smull	r1, r2, r2, r3
 8000a84:	1152      	asrs	r2, r2, #5
 8000a86:	17db      	asrs	r3, r3, #31
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	4a0c      	ldr	r2, [pc, #48]	; (8000abc <fsm1_automatic_run+0x3ec>)
 8000a8c:	6013      	str	r3, [r2, #0]
			}
			break;
 8000a8e:	e007      	b.n	8000aa0 <fsm1_automatic_run+0x3d0>
		default:
			break;
 8000a90:	bf00      	nop
 8000a92:	e006      	b.n	8000aa2 <fsm1_automatic_run+0x3d2>
			break;
 8000a94:	bf00      	nop
 8000a96:	e004      	b.n	8000aa2 <fsm1_automatic_run+0x3d2>
			break;
 8000a98:	bf00      	nop
 8000a9a:	e002      	b.n	8000aa2 <fsm1_automatic_run+0x3d2>
			break;
 8000a9c:	bf00      	nop
 8000a9e:	e000      	b.n	8000aa2 <fsm1_automatic_run+0x3d2>
			break;
 8000aa0:	bf00      	nop
	}
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000004 	.word	0x20000004
 8000aac:	20000074 	.word	0x20000074
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	20000014 	.word	0x20000014
 8000ab8:	51eb851f 	.word	0x51eb851f
 8000abc:	2000006c 	.word	0x2000006c
 8000ac0:	2000001c 	.word	0x2000001c
 8000ac4:	20000018 	.word	0x20000018

08000ac8 <fsm2_automatic_run>:

void fsm2_automatic_run(){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	switch(status2){
 8000acc:	4bab      	ldr	r3, [pc, #684]	; (8000d7c <fsm2_automatic_run+0x2b4>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	2b11      	cmp	r3, #17
 8000ad4:	f200 81d8 	bhi.w	8000e88 <fsm2_automatic_run+0x3c0>
 8000ad8:	a201      	add	r2, pc, #4	; (adr r2, 8000ae0 <fsm2_automatic_run+0x18>)
 8000ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ade:	bf00      	nop
 8000ae0:	08000b29 	.word	0x08000b29
 8000ae4:	08000b6d 	.word	0x08000b6d
 8000ae8:	08000ccd 	.word	0x08000ccd
 8000aec:	08000c1d 	.word	0x08000c1d
 8000af0:	08000e89 	.word	0x08000e89
 8000af4:	08000e89 	.word	0x08000e89
 8000af8:	08000e89 	.word	0x08000e89
 8000afc:	08000e89 	.word	0x08000e89
 8000b00:	08000e89 	.word	0x08000e89
 8000b04:	08000e89 	.word	0x08000e89
 8000b08:	08000e89 	.word	0x08000e89
 8000b0c:	08000e89 	.word	0x08000e89
 8000b10:	08000e89 	.word	0x08000e89
 8000b14:	08000e89 	.word	0x08000e89
 8000b18:	08000e89 	.word	0x08000e89
 8000b1c:	08000e89 	.word	0x08000e89
 8000b20:	08000e89 	.word	0x08000e89
 8000b24:	08000db5 	.word	0x08000db5
		case INIT:
			//TODO
			setGreenLed2();
 8000b28:	f7ff fd5c 	bl	80005e4 <setGreenLed2>
			status2 = AUTO_GREEN;
 8000b2c:	4b93      	ldr	r3, [pc, #588]	; (8000d7c <fsm2_automatic_run+0x2b4>)
 8000b2e:	2204      	movs	r2, #4
 8000b30:	601a      	str	r2, [r3, #0]
			lastState2 = status2;
 8000b32:	4b92      	ldr	r3, [pc, #584]	; (8000d7c <fsm2_automatic_run+0x2b4>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a92      	ldr	r2, [pc, #584]	; (8000d80 <fsm2_automatic_run+0x2b8>)
 8000b38:	6013      	str	r3, [r2, #0]
			setTimer2(green_duration2);
 8000b3a:	4b92      	ldr	r3, [pc, #584]	; (8000d84 <fsm2_automatic_run+0x2bc>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 fefc 	bl	800193c <setTimer2>
			setTimer4(100);
 8000b44:	2064      	movs	r0, #100	; 0x64
 8000b46:	f000 ff21 	bl	800198c <setTimer4>
			timeCountdown2 = green_duration2/100;
 8000b4a:	4b8e      	ldr	r3, [pc, #568]	; (8000d84 <fsm2_automatic_run+0x2bc>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a8e      	ldr	r2, [pc, #568]	; (8000d88 <fsm2_automatic_run+0x2c0>)
 8000b50:	fb82 1203 	smull	r1, r2, r2, r3
 8000b54:	1152      	asrs	r2, r2, #5
 8000b56:	17db      	asrs	r3, r3, #31
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	4a8c      	ldr	r2, [pc, #560]	; (8000d8c <fsm2_automatic_run+0x2c4>)
 8000b5c:	6013      	str	r3, [r2, #0]
			set2 = &timeCountdown2;
 8000b5e:	4b8c      	ldr	r3, [pc, #560]	; (8000d90 <fsm2_automatic_run+0x2c8>)
 8000b60:	4a8a      	ldr	r2, [pc, #552]	; (8000d8c <fsm2_automatic_run+0x2c4>)
 8000b62:	601a      	str	r2, [r3, #0]
			mode = 1;
 8000b64:	4b8b      	ldr	r3, [pc, #556]	; (8000d94 <fsm2_automatic_run+0x2cc>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	601a      	str	r2, [r3, #0]
			break;
 8000b6a:	e196      	b.n	8000e9a <fsm2_automatic_run+0x3d2>

		case AUTO_RED:
			//TODO
			setRedLed2();
 8000b6c:	f7ff fd0e 	bl	800058c <setRedLed2>
			mode = 1;
 8000b70:	4b88      	ldr	r3, [pc, #544]	; (8000d94 <fsm2_automatic_run+0x2cc>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	601a      	str	r2, [r3, #0]
			if(isTimer4Expired()){
 8000b76:	f001 f80f 	bl	8001b98 <isTimer4Expired>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d007      	beq.n	8000b90 <fsm2_automatic_run+0xc8>
				setTimer4(100);
 8000b80:	2064      	movs	r0, #100	; 0x64
 8000b82:	f000 ff03 	bl	800198c <setTimer4>
				timeCountdown2--;
 8000b86:	4b81      	ldr	r3, [pc, #516]	; (8000d8c <fsm2_automatic_run+0x2c4>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	4a7f      	ldr	r2, [pc, #508]	; (8000d8c <fsm2_automatic_run+0x2c4>)
 8000b8e:	6013      	str	r3, [r2, #0]
			}
			if(isTimer2Expired() == 1){
 8000b90:	f000 ffde 	bl	8001b50 <isTimer2Expired>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d114      	bne.n	8000bc4 <fsm2_automatic_run+0xfc>
				setTimer2(green_duration2);
 8000b9a:	4b7a      	ldr	r3, [pc, #488]	; (8000d84 <fsm2_automatic_run+0x2bc>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 fecc 	bl	800193c <setTimer2>
				status2 = AUTO_GREEN;
 8000ba4:	4b75      	ldr	r3, [pc, #468]	; (8000d7c <fsm2_automatic_run+0x2b4>)
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	601a      	str	r2, [r3, #0]
				setTimer4(100);
 8000baa:	2064      	movs	r0, #100	; 0x64
 8000bac:	f000 feee 	bl	800198c <setTimer4>
				timeCountdown2 = green_duration2/100;
 8000bb0:	4b74      	ldr	r3, [pc, #464]	; (8000d84 <fsm2_automatic_run+0x2bc>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a74      	ldr	r2, [pc, #464]	; (8000d88 <fsm2_automatic_run+0x2c0>)
 8000bb6:	fb82 1203 	smull	r1, r2, r2, r3
 8000bba:	1152      	asrs	r2, r2, #5
 8000bbc:	17db      	asrs	r3, r3, #31
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	4a72      	ldr	r2, [pc, #456]	; (8000d8c <fsm2_automatic_run+0x2c4>)
 8000bc2:	6013      	str	r3, [r2, #0]
			}

			if(isButtonPressed(0)){
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f000 fccb 	bl	8001560 <isButtonPressed>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	f000 815d 	beq.w	8000e8c <fsm2_automatic_run+0x3c4>
				clearAllLed();
 8000bd2:	f7ff fd59 	bl	8000688 <clearAllLed>
				lastState1 = status1;
 8000bd6:	4b70      	ldr	r3, [pc, #448]	; (8000d98 <fsm2_automatic_run+0x2d0>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a70      	ldr	r2, [pc, #448]	; (8000d9c <fsm2_automatic_run+0x2d4>)
 8000bdc:	6013      	str	r3, [r2, #0]
				lastState2 = status2;
 8000bde:	4b67      	ldr	r3, [pc, #412]	; (8000d7c <fsm2_automatic_run+0x2b4>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a67      	ldr	r2, [pc, #412]	; (8000d80 <fsm2_automatic_run+0x2b8>)
 8000be4:	6013      	str	r3, [r2, #0]
				status1 = WAIT;
 8000be6:	4b6c      	ldr	r3, [pc, #432]	; (8000d98 <fsm2_automatic_run+0x2d0>)
 8000be8:	2212      	movs	r2, #18
 8000bea:	601a      	str	r2, [r3, #0]
				status2 = WAIT;
 8000bec:	4b63      	ldr	r3, [pc, #396]	; (8000d7c <fsm2_automatic_run+0x2b4>)
 8000bee:	2212      	movs	r2, #18
 8000bf0:	601a      	str	r2, [r3, #0]
				status3 = MODIFY_RED1;
 8000bf2:	4b6b      	ldr	r3, [pc, #428]	; (8000da0 <fsm2_automatic_run+0x2d8>)
 8000bf4:	220c      	movs	r2, #12
 8000bf6:	601a      	str	r2, [r3, #0]
				clearTimer1();
 8000bf8:	f000 fedc 	bl	80019b4 <clearTimer1>
				clearTimer2();
 8000bfc:	f000 feea 	bl	80019d4 <clearTimer2>
				clearTimer3();
 8000c00:	f000 fef8 	bl	80019f4 <clearTimer3>
				clearTimer4();
 8000c04:	f000 ff06 	bl	8001a14 <clearTimer4>
				setTimer1(100);
 8000c08:	2064      	movs	r0, #100	; 0x64
 8000c0a:	f000 fe83 	bl	8001914 <setTimer1>
				set1 = &time_input;
 8000c0e:	4b65      	ldr	r3, [pc, #404]	; (8000da4 <fsm2_automatic_run+0x2dc>)
 8000c10:	4a65      	ldr	r2, [pc, #404]	; (8000da8 <fsm2_automatic_run+0x2e0>)
 8000c12:	601a      	str	r2, [r3, #0]
				set2 = &mode;
 8000c14:	4b5e      	ldr	r3, [pc, #376]	; (8000d90 <fsm2_automatic_run+0x2c8>)
 8000c16:	4a5f      	ldr	r2, [pc, #380]	; (8000d94 <fsm2_automatic_run+0x2cc>)
 8000c18:	601a      	str	r2, [r3, #0]
			}
			break;
 8000c1a:	e137      	b.n	8000e8c <fsm2_automatic_run+0x3c4>

		case AUTO_GREEN:
			//TODO
			mode = 1;
 8000c1c:	4b5d      	ldr	r3, [pc, #372]	; (8000d94 <fsm2_automatic_run+0x2cc>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	601a      	str	r2, [r3, #0]
			setGreenLed2();
 8000c22:	f7ff fcdf 	bl	80005e4 <setGreenLed2>
			if(isTimer4Expired()){
 8000c26:	f000 ffb7 	bl	8001b98 <isTimer4Expired>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d007      	beq.n	8000c40 <fsm2_automatic_run+0x178>
				setTimer4(100);
 8000c30:	2064      	movs	r0, #100	; 0x64
 8000c32:	f000 feab 	bl	800198c <setTimer4>
				timeCountdown2--;
 8000c36:	4b55      	ldr	r3, [pc, #340]	; (8000d8c <fsm2_automatic_run+0x2c4>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	4a53      	ldr	r2, [pc, #332]	; (8000d8c <fsm2_automatic_run+0x2c4>)
 8000c3e:	6013      	str	r3, [r2, #0]
			}
			if(isTimer2Expired() == 1){
 8000c40:	f000 ff86 	bl	8001b50 <isTimer2Expired>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d114      	bne.n	8000c74 <fsm2_automatic_run+0x1ac>
				setTimer2(yellow_duration2);
 8000c4a:	4b58      	ldr	r3, [pc, #352]	; (8000dac <fsm2_automatic_run+0x2e4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 fe74 	bl	800193c <setTimer2>
				status2 = AUTO_YELLOW;
 8000c54:	4b49      	ldr	r3, [pc, #292]	; (8000d7c <fsm2_automatic_run+0x2b4>)
 8000c56:	2203      	movs	r2, #3
 8000c58:	601a      	str	r2, [r3, #0]
				setTimer4(100);
 8000c5a:	2064      	movs	r0, #100	; 0x64
 8000c5c:	f000 fe96 	bl	800198c <setTimer4>
				timeCountdown2 = yellow_duration2/100;
 8000c60:	4b52      	ldr	r3, [pc, #328]	; (8000dac <fsm2_automatic_run+0x2e4>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a48      	ldr	r2, [pc, #288]	; (8000d88 <fsm2_automatic_run+0x2c0>)
 8000c66:	fb82 1203 	smull	r1, r2, r2, r3
 8000c6a:	1152      	asrs	r2, r2, #5
 8000c6c:	17db      	asrs	r3, r3, #31
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	4a46      	ldr	r2, [pc, #280]	; (8000d8c <fsm2_automatic_run+0x2c4>)
 8000c72:	6013      	str	r3, [r2, #0]
			}

			if(isButtonPressed(0)){
 8000c74:	2000      	movs	r0, #0
 8000c76:	f000 fc73 	bl	8001560 <isButtonPressed>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f000 8107 	beq.w	8000e90 <fsm2_automatic_run+0x3c8>
				clearAllLed();
 8000c82:	f7ff fd01 	bl	8000688 <clearAllLed>
				lastState1 = status1;
 8000c86:	4b44      	ldr	r3, [pc, #272]	; (8000d98 <fsm2_automatic_run+0x2d0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a44      	ldr	r2, [pc, #272]	; (8000d9c <fsm2_automatic_run+0x2d4>)
 8000c8c:	6013      	str	r3, [r2, #0]
				lastState2 = status2;
 8000c8e:	4b3b      	ldr	r3, [pc, #236]	; (8000d7c <fsm2_automatic_run+0x2b4>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a3b      	ldr	r2, [pc, #236]	; (8000d80 <fsm2_automatic_run+0x2b8>)
 8000c94:	6013      	str	r3, [r2, #0]
				status1 = WAIT;
 8000c96:	4b40      	ldr	r3, [pc, #256]	; (8000d98 <fsm2_automatic_run+0x2d0>)
 8000c98:	2212      	movs	r2, #18
 8000c9a:	601a      	str	r2, [r3, #0]
				status2 = WAIT;
 8000c9c:	4b37      	ldr	r3, [pc, #220]	; (8000d7c <fsm2_automatic_run+0x2b4>)
 8000c9e:	2212      	movs	r2, #18
 8000ca0:	601a      	str	r2, [r3, #0]
				status3 = MODIFY_RED1;
 8000ca2:	4b3f      	ldr	r3, [pc, #252]	; (8000da0 <fsm2_automatic_run+0x2d8>)
 8000ca4:	220c      	movs	r2, #12
 8000ca6:	601a      	str	r2, [r3, #0]
				clearTimer1();
 8000ca8:	f000 fe84 	bl	80019b4 <clearTimer1>
				clearTimer2();
 8000cac:	f000 fe92 	bl	80019d4 <clearTimer2>
				clearTimer3();
 8000cb0:	f000 fea0 	bl	80019f4 <clearTimer3>
				clearTimer4();
 8000cb4:	f000 feae 	bl	8001a14 <clearTimer4>
				setTimer1(100);
 8000cb8:	2064      	movs	r0, #100	; 0x64
 8000cba:	f000 fe2b 	bl	8001914 <setTimer1>
				set1 = &time_input;
 8000cbe:	4b39      	ldr	r3, [pc, #228]	; (8000da4 <fsm2_automatic_run+0x2dc>)
 8000cc0:	4a39      	ldr	r2, [pc, #228]	; (8000da8 <fsm2_automatic_run+0x2e0>)
 8000cc2:	601a      	str	r2, [r3, #0]
				set2 = &mode;
 8000cc4:	4b32      	ldr	r3, [pc, #200]	; (8000d90 <fsm2_automatic_run+0x2c8>)
 8000cc6:	4a33      	ldr	r2, [pc, #204]	; (8000d94 <fsm2_automatic_run+0x2cc>)
 8000cc8:	601a      	str	r2, [r3, #0]
			}
			break;
 8000cca:	e0e1      	b.n	8000e90 <fsm2_automatic_run+0x3c8>

		case AUTO_YELLOW:
			//TODO
			mode = 1;
 8000ccc:	4b31      	ldr	r3, [pc, #196]	; (8000d94 <fsm2_automatic_run+0x2cc>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	601a      	str	r2, [r3, #0]
			setYellowLed2();
 8000cd2:	f7ff fc71 	bl	80005b8 <setYellowLed2>
			if(isTimer4Expired()){
 8000cd6:	f000 ff5f 	bl	8001b98 <isTimer4Expired>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d007      	beq.n	8000cf0 <fsm2_automatic_run+0x228>
				setTimer4(100);
 8000ce0:	2064      	movs	r0, #100	; 0x64
 8000ce2:	f000 fe53 	bl	800198c <setTimer4>
				timeCountdown2--;
 8000ce6:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <fsm2_automatic_run+0x2c4>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	4a27      	ldr	r2, [pc, #156]	; (8000d8c <fsm2_automatic_run+0x2c4>)
 8000cee:	6013      	str	r3, [r2, #0]
			}
			if(isTimer2Expired() == 1){
 8000cf0:	f000 ff2e 	bl	8001b50 <isTimer2Expired>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d114      	bne.n	8000d24 <fsm2_automatic_run+0x25c>
				setTimer2(red_duration2);
 8000cfa:	4b2d      	ldr	r3, [pc, #180]	; (8000db0 <fsm2_automatic_run+0x2e8>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 fe1c 	bl	800193c <setTimer2>
				status2 = AUTO_RED;
 8000d04:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <fsm2_automatic_run+0x2b4>)
 8000d06:	2202      	movs	r2, #2
 8000d08:	601a      	str	r2, [r3, #0]
				setTimer4(100);
 8000d0a:	2064      	movs	r0, #100	; 0x64
 8000d0c:	f000 fe3e 	bl	800198c <setTimer4>
				timeCountdown2 = red_duration2/100;
 8000d10:	4b27      	ldr	r3, [pc, #156]	; (8000db0 <fsm2_automatic_run+0x2e8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a1c      	ldr	r2, [pc, #112]	; (8000d88 <fsm2_automatic_run+0x2c0>)
 8000d16:	fb82 1203 	smull	r1, r2, r2, r3
 8000d1a:	1152      	asrs	r2, r2, #5
 8000d1c:	17db      	asrs	r3, r3, #31
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	4a1a      	ldr	r2, [pc, #104]	; (8000d8c <fsm2_automatic_run+0x2c4>)
 8000d22:	6013      	str	r3, [r2, #0]
			}

			if(isButtonPressed(0)){
 8000d24:	2000      	movs	r0, #0
 8000d26:	f000 fc1b 	bl	8001560 <isButtonPressed>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f000 80b1 	beq.w	8000e94 <fsm2_automatic_run+0x3cc>
				clearAllLed();
 8000d32:	f7ff fca9 	bl	8000688 <clearAllLed>
				lastState1 = status1;
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <fsm2_automatic_run+0x2d0>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a18      	ldr	r2, [pc, #96]	; (8000d9c <fsm2_automatic_run+0x2d4>)
 8000d3c:	6013      	str	r3, [r2, #0]
				lastState2 = status2;
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <fsm2_automatic_run+0x2b4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a0f      	ldr	r2, [pc, #60]	; (8000d80 <fsm2_automatic_run+0x2b8>)
 8000d44:	6013      	str	r3, [r2, #0]
				status1 = WAIT;
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <fsm2_automatic_run+0x2d0>)
 8000d48:	2212      	movs	r2, #18
 8000d4a:	601a      	str	r2, [r3, #0]
				status2 = WAIT;
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <fsm2_automatic_run+0x2b4>)
 8000d4e:	2212      	movs	r2, #18
 8000d50:	601a      	str	r2, [r3, #0]
				status3 = MODIFY_RED1;
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <fsm2_automatic_run+0x2d8>)
 8000d54:	220c      	movs	r2, #12
 8000d56:	601a      	str	r2, [r3, #0]
				clearTimer1();
 8000d58:	f000 fe2c 	bl	80019b4 <clearTimer1>
				clearTimer2();
 8000d5c:	f000 fe3a 	bl	80019d4 <clearTimer2>
				clearTimer3();
 8000d60:	f000 fe48 	bl	80019f4 <clearTimer3>
				clearTimer4();
 8000d64:	f000 fe56 	bl	8001a14 <clearTimer4>
				setTimer1(100);
 8000d68:	2064      	movs	r0, #100	; 0x64
 8000d6a:	f000 fdd3 	bl	8001914 <setTimer1>
				set1 = &time_input;
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <fsm2_automatic_run+0x2dc>)
 8000d70:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <fsm2_automatic_run+0x2e0>)
 8000d72:	601a      	str	r2, [r3, #0]
				set2 = &mode;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <fsm2_automatic_run+0x2c8>)
 8000d76:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <fsm2_automatic_run+0x2cc>)
 8000d78:	601a      	str	r2, [r3, #0]
			}
			break;
 8000d7a:	e08b      	b.n	8000e94 <fsm2_automatic_run+0x3cc>
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	2000000c 	.word	0x2000000c
 8000d84:	20000028 	.word	0x20000028
 8000d88:	51eb851f 	.word	0x51eb851f
 8000d8c:	20000070 	.word	0x20000070
 8000d90:	200000c0 	.word	0x200000c0
 8000d94:	20000030 	.word	0x20000030
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	20000004 	.word	0x20000004
 8000da0:	20000010 	.word	0x20000010
 8000da4:	200000c4 	.word	0x200000c4
 8000da8:	2000002c 	.word	0x2000002c
 8000dac:	20000024 	.word	0x20000024
 8000db0:	20000020 	.word	0x20000020

		case WAIT:
			if(lastState2 == AUTO_RED && returnFlag2){
 8000db4:	4b3a      	ldr	r3, [pc, #232]	; (8000ea0 <fsm2_automatic_run+0x3d8>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d11e      	bne.n	8000dfa <fsm2_automatic_run+0x332>
 8000dbc:	4b39      	ldr	r3, [pc, #228]	; (8000ea4 <fsm2_automatic_run+0x3dc>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d01a      	beq.n	8000dfa <fsm2_automatic_run+0x332>
				clearAllLed();
 8000dc4:	f7ff fc60 	bl	8000688 <clearAllLed>
				status2 = lastState2;
 8000dc8:	4b35      	ldr	r3, [pc, #212]	; (8000ea0 <fsm2_automatic_run+0x3d8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a36      	ldr	r2, [pc, #216]	; (8000ea8 <fsm2_automatic_run+0x3e0>)
 8000dce:	6013      	str	r3, [r2, #0]
				returnFlag2 = 0;
 8000dd0:	4b34      	ldr	r3, [pc, #208]	; (8000ea4 <fsm2_automatic_run+0x3dc>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
				setTimer4(100);
 8000dd6:	2064      	movs	r0, #100	; 0x64
 8000dd8:	f000 fdd8 	bl	800198c <setTimer4>
				setTimer2(red_duration2);
 8000ddc:	4b33      	ldr	r3, [pc, #204]	; (8000eac <fsm2_automatic_run+0x3e4>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 fdab 	bl	800193c <setTimer2>
				timeCountdown2 = red_duration2/100;
 8000de6:	4b31      	ldr	r3, [pc, #196]	; (8000eac <fsm2_automatic_run+0x3e4>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a31      	ldr	r2, [pc, #196]	; (8000eb0 <fsm2_automatic_run+0x3e8>)
 8000dec:	fb82 1203 	smull	r1, r2, r2, r3
 8000df0:	1152      	asrs	r2, r2, #5
 8000df2:	17db      	asrs	r3, r3, #31
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	4a2f      	ldr	r2, [pc, #188]	; (8000eb4 <fsm2_automatic_run+0x3ec>)
 8000df8:	6013      	str	r3, [r2, #0]
			}
			if(lastState2 == AUTO_GREEN && returnFlag2){
 8000dfa:	4b29      	ldr	r3, [pc, #164]	; (8000ea0 <fsm2_automatic_run+0x3d8>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	d11e      	bne.n	8000e40 <fsm2_automatic_run+0x378>
 8000e02:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <fsm2_automatic_run+0x3dc>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d01a      	beq.n	8000e40 <fsm2_automatic_run+0x378>
				returnFlag2 = 0;
 8000e0a:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <fsm2_automatic_run+0x3dc>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
				status2 = lastState2;
 8000e10:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <fsm2_automatic_run+0x3d8>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a24      	ldr	r2, [pc, #144]	; (8000ea8 <fsm2_automatic_run+0x3e0>)
 8000e16:	6013      	str	r3, [r2, #0]
				clearAllLed();
 8000e18:	f7ff fc36 	bl	8000688 <clearAllLed>
				setTimer4(100);
 8000e1c:	2064      	movs	r0, #100	; 0x64
 8000e1e:	f000 fdb5 	bl	800198c <setTimer4>
				setTimer2(green_duration2);
 8000e22:	4b25      	ldr	r3, [pc, #148]	; (8000eb8 <fsm2_automatic_run+0x3f0>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 fd88 	bl	800193c <setTimer2>
				timeCountdown2 = green_duration2/100;
 8000e2c:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <fsm2_automatic_run+0x3f0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a1f      	ldr	r2, [pc, #124]	; (8000eb0 <fsm2_automatic_run+0x3e8>)
 8000e32:	fb82 1203 	smull	r1, r2, r2, r3
 8000e36:	1152      	asrs	r2, r2, #5
 8000e38:	17db      	asrs	r3, r3, #31
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	4a1d      	ldr	r2, [pc, #116]	; (8000eb4 <fsm2_automatic_run+0x3ec>)
 8000e3e:	6013      	str	r3, [r2, #0]
			}
			if(lastState2 == AUTO_YELLOW && returnFlag2) {
 8000e40:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <fsm2_automatic_run+0x3d8>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d127      	bne.n	8000e98 <fsm2_automatic_run+0x3d0>
 8000e48:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <fsm2_automatic_run+0x3dc>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d023      	beq.n	8000e98 <fsm2_automatic_run+0x3d0>
				returnFlag2 = 0;
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <fsm2_automatic_run+0x3dc>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
				status2 = lastState2;
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <fsm2_automatic_run+0x3d8>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a13      	ldr	r2, [pc, #76]	; (8000ea8 <fsm2_automatic_run+0x3e0>)
 8000e5c:	6013      	str	r3, [r2, #0]
				clearAllLed();
 8000e5e:	f7ff fc13 	bl	8000688 <clearAllLed>
				setTimer4(100);
 8000e62:	2064      	movs	r0, #100	; 0x64
 8000e64:	f000 fd92 	bl	800198c <setTimer4>
				setTimer2(yellow_duration2);
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <fsm2_automatic_run+0x3f4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 fd65 	bl	800193c <setTimer2>
				timeCountdown2 = yellow_duration2/100;
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <fsm2_automatic_run+0x3f4>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a0e      	ldr	r2, [pc, #56]	; (8000eb0 <fsm2_automatic_run+0x3e8>)
 8000e78:	fb82 1203 	smull	r1, r2, r2, r3
 8000e7c:	1152      	asrs	r2, r2, #5
 8000e7e:	17db      	asrs	r3, r3, #31
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	4a0c      	ldr	r2, [pc, #48]	; (8000eb4 <fsm2_automatic_run+0x3ec>)
 8000e84:	6013      	str	r3, [r2, #0]
			}
			break;
 8000e86:	e007      	b.n	8000e98 <fsm2_automatic_run+0x3d0>
		default:
			break;
 8000e88:	bf00      	nop
 8000e8a:	e006      	b.n	8000e9a <fsm2_automatic_run+0x3d2>
			break;
 8000e8c:	bf00      	nop
 8000e8e:	e004      	b.n	8000e9a <fsm2_automatic_run+0x3d2>
			break;
 8000e90:	bf00      	nop
 8000e92:	e002      	b.n	8000e9a <fsm2_automatic_run+0x3d2>
			break;
 8000e94:	bf00      	nop
 8000e96:	e000      	b.n	8000e9a <fsm2_automatic_run+0x3d2>
			break;
 8000e98:	bf00      	nop
	}
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2000000c 	.word	0x2000000c
 8000ea4:	20000078 	.word	0x20000078
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000020 	.word	0x20000020
 8000eb0:	51eb851f 	.word	0x51eb851f
 8000eb4:	20000070 	.word	0x20000070
 8000eb8:	20000028 	.word	0x20000028
 8000ebc:	20000024 	.word	0x20000024

08000ec0 <fsm_modify_timer_control>:
 */


#include "fsm_modify_timer_control.h"

void fsm_modify_timer_control(){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	switch(status3){
 8000ec4:	4bab      	ldr	r3, [pc, #684]	; (8001174 <fsm_modify_timer_control+0x2b4>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	3b0c      	subs	r3, #12
 8000eca:	2b06      	cmp	r3, #6
 8000ecc:	f200 8218 	bhi.w	8001300 <fsm_modify_timer_control+0x440>
 8000ed0:	a201      	add	r2, pc, #4	; (adr r2, 8000ed8 <fsm_modify_timer_control+0x18>)
 8000ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed6:	bf00      	nop
 8000ed8:	08000ef5 	.word	0x08000ef5
 8000edc:	08000f95 	.word	0x08000f95
 8000ee0:	08001035 	.word	0x08001035
 8000ee4:	080010d5 	.word	0x080010d5
 8000ee8:	08001195 	.word	0x08001195
 8000eec:	08001233 	.word	0x08001233
 8000ef0:	08001301 	.word	0x08001301
		case MODIFY_RED1:
			//set mode to display
			mode = 2;
 8000ef4:	4ba0      	ldr	r3, [pc, #640]	; (8001178 <fsm_modify_timer_control+0x2b8>)
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	601a      	str	r2, [r3, #0]
			if(isTimer1Expired()) {
 8000efa:	f000 fe17 	bl	8001b2c <isTimer1Expired>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d006      	beq.n	8000f12 <fsm_modify_timer_control+0x52>
				setTimer1(100);
 8000f04:	2064      	movs	r0, #100	; 0x64
 8000f06:	f000 fd05 	bl	8001914 <setTimer1>
				toggleRed1();
 8000f0a:	f7ff fb81 	bl	8000610 <toggleRed1>
				toggleRed2();
 8000f0e:	f7ff fb9d 	bl	800064c <toggleRed2>
			}

			//check if user want to apply new duration1 and return auto mode
			if(isButtonPressed(RETURN)) {
 8000f12:	2002      	movs	r0, #2
 8000f14:	f000 fb24 	bl	8001560 <isButtonPressed>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d00e      	beq.n	8000f3c <fsm_modify_timer_control+0x7c>
				clearAllLed();
 8000f1e:	f7ff fbb3 	bl	8000688 <clearAllLed>
				//set new duration1 for red led
				red_duration1 = time_input * 100;
 8000f22:	4b96      	ldr	r3, [pc, #600]	; (800117c <fsm_modify_timer_control+0x2bc>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2264      	movs	r2, #100	; 0x64
 8000f28:	fb02 f303 	mul.w	r3, r2, r3
 8000f2c:	4a94      	ldr	r2, [pc, #592]	; (8001180 <fsm_modify_timer_control+0x2c0>)
 8000f2e:	6013      	str	r3, [r2, #0]
				time_input = 1;
 8000f30:	4b92      	ldr	r3, [pc, #584]	; (800117c <fsm_modify_timer_control+0x2bc>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	601a      	str	r2, [r3, #0]
				status3 = MODIFY_YELLOW1;
 8000f36:	4b8f      	ldr	r3, [pc, #572]	; (8001174 <fsm_modify_timer_control+0x2b4>)
 8000f38:	220d      	movs	r2, #13
 8000f3a:	601a      	str	r2, [r3, #0]
			}
			//check if user want to increase time
			if(isButtonPressed(SET_TIME)) {
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f000 fb0f 	bl	8001560 <isButtonPressed>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d015      	beq.n	8000f74 <fsm_modify_timer_control+0xb4>
				time_input = (time_input + 1) % 100; //max value is 99
 8000f48:	4b8c      	ldr	r3, [pc, #560]	; (800117c <fsm_modify_timer_control+0x2bc>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	1c5a      	adds	r2, r3, #1
 8000f4e:	4b8d      	ldr	r3, [pc, #564]	; (8001184 <fsm_modify_timer_control+0x2c4>)
 8000f50:	fb83 1302 	smull	r1, r3, r3, r2
 8000f54:	1159      	asrs	r1, r3, #5
 8000f56:	17d3      	asrs	r3, r2, #31
 8000f58:	1acb      	subs	r3, r1, r3
 8000f5a:	2164      	movs	r1, #100	; 0x64
 8000f5c:	fb01 f303 	mul.w	r3, r1, r3
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	4a86      	ldr	r2, [pc, #536]	; (800117c <fsm_modify_timer_control+0x2bc>)
 8000f64:	6013      	str	r3, [r2, #0]
				if(time_input == 0) time_input = 1; //0 is invalid value
 8000f66:	4b85      	ldr	r3, [pc, #532]	; (800117c <fsm_modify_timer_control+0x2bc>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d102      	bne.n	8000f74 <fsm_modify_timer_control+0xb4>
 8000f6e:	4b83      	ldr	r3, [pc, #524]	; (800117c <fsm_modify_timer_control+0x2bc>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]
			}

			//check if user want to change mode
			if(isButtonPressed(CONTROL_MODE)){
 8000f74:	2000      	movs	r0, #0
 8000f76:	f000 faf3 	bl	8001560 <isButtonPressed>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 81c1 	beq.w	8001304 <fsm_modify_timer_control+0x444>
				clearAllLed();
 8000f82:	f7ff fb81 	bl	8000688 <clearAllLed>
				time_input = 1;
 8000f86:	4b7d      	ldr	r3, [pc, #500]	; (800117c <fsm_modify_timer_control+0x2bc>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]
				status3 = MODIFY_YELLOW1;
 8000f8c:	4b79      	ldr	r3, [pc, #484]	; (8001174 <fsm_modify_timer_control+0x2b4>)
 8000f8e:	220d      	movs	r2, #13
 8000f90:	601a      	str	r2, [r3, #0]
			}
			break;
 8000f92:	e1b7      	b.n	8001304 <fsm_modify_timer_control+0x444>

		case MODIFY_YELLOW1:
			//set mode to display
			mode = 3;
 8000f94:	4b78      	ldr	r3, [pc, #480]	; (8001178 <fsm_modify_timer_control+0x2b8>)
 8000f96:	2203      	movs	r2, #3
 8000f98:	601a      	str	r2, [r3, #0]
			if(isTimer1Expired()) {
 8000f9a:	f000 fdc7 	bl	8001b2c <isTimer1Expired>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d006      	beq.n	8000fb2 <fsm_modify_timer_control+0xf2>
				setTimer1(100);
 8000fa4:	2064      	movs	r0, #100	; 0x64
 8000fa6:	f000 fcb5 	bl	8001914 <setTimer1>
				toggleYellow1();
 8000faa:	f7ff fb3b 	bl	8000624 <toggleYellow1>
				toggleYellow2();
 8000fae:	f7ff fb57 	bl	8000660 <toggleYellow2>
			}

			//check if user want to apply new duration1 and return auto mode
			if(isButtonPressed(RETURN)){
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	f000 fad4 	bl	8001560 <isButtonPressed>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d00e      	beq.n	8000fdc <fsm_modify_timer_control+0x11c>
				clearAllLed();
 8000fbe:	f7ff fb63 	bl	8000688 <clearAllLed>
				//set new duration1 for yellow led
				yellow_duration1 = time_input * 100;
 8000fc2:	4b6e      	ldr	r3, [pc, #440]	; (800117c <fsm_modify_timer_control+0x2bc>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2264      	movs	r2, #100	; 0x64
 8000fc8:	fb02 f303 	mul.w	r3, r2, r3
 8000fcc:	4a6e      	ldr	r2, [pc, #440]	; (8001188 <fsm_modify_timer_control+0x2c8>)
 8000fce:	6013      	str	r3, [r2, #0]
				time_input = 1;
 8000fd0:	4b6a      	ldr	r3, [pc, #424]	; (800117c <fsm_modify_timer_control+0x2bc>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	601a      	str	r2, [r3, #0]
				status3 = MODIFY_GREEN1;
 8000fd6:	4b67      	ldr	r3, [pc, #412]	; (8001174 <fsm_modify_timer_control+0x2b4>)
 8000fd8:	220e      	movs	r2, #14
 8000fda:	601a      	str	r2, [r3, #0]
			}

			//check if user want to increase time
			if(isButtonPressed(SET_TIME)) {
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f000 fabf 	bl	8001560 <isButtonPressed>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d015      	beq.n	8001014 <fsm_modify_timer_control+0x154>
				time_input = (time_input + 1) % 100; //99 is the max value
 8000fe8:	4b64      	ldr	r3, [pc, #400]	; (800117c <fsm_modify_timer_control+0x2bc>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	1c5a      	adds	r2, r3, #1
 8000fee:	4b65      	ldr	r3, [pc, #404]	; (8001184 <fsm_modify_timer_control+0x2c4>)
 8000ff0:	fb83 1302 	smull	r1, r3, r3, r2
 8000ff4:	1159      	asrs	r1, r3, #5
 8000ff6:	17d3      	asrs	r3, r2, #31
 8000ff8:	1acb      	subs	r3, r1, r3
 8000ffa:	2164      	movs	r1, #100	; 0x64
 8000ffc:	fb01 f303 	mul.w	r3, r1, r3
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	4a5e      	ldr	r2, [pc, #376]	; (800117c <fsm_modify_timer_control+0x2bc>)
 8001004:	6013      	str	r3, [r2, #0]
				if(time_input == 0) time_input = 1; //0 is invalid value
 8001006:	4b5d      	ldr	r3, [pc, #372]	; (800117c <fsm_modify_timer_control+0x2bc>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d102      	bne.n	8001014 <fsm_modify_timer_control+0x154>
 800100e:	4b5b      	ldr	r3, [pc, #364]	; (800117c <fsm_modify_timer_control+0x2bc>)
 8001010:	2201      	movs	r2, #1
 8001012:	601a      	str	r2, [r3, #0]
			}

			//check if user want to change mode
			if(isButtonPressed(CONTROL_MODE)){
 8001014:	2000      	movs	r0, #0
 8001016:	f000 faa3 	bl	8001560 <isButtonPressed>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 8173 	beq.w	8001308 <fsm_modify_timer_control+0x448>
				clearAllLed();
 8001022:	f7ff fb31 	bl	8000688 <clearAllLed>
				time_input = 1;
 8001026:	4b55      	ldr	r3, [pc, #340]	; (800117c <fsm_modify_timer_control+0x2bc>)
 8001028:	2201      	movs	r2, #1
 800102a:	601a      	str	r2, [r3, #0]
				status3 = MODIFY_GREEN1;
 800102c:	4b51      	ldr	r3, [pc, #324]	; (8001174 <fsm_modify_timer_control+0x2b4>)
 800102e:	220e      	movs	r2, #14
 8001030:	601a      	str	r2, [r3, #0]
			}
			break;
 8001032:	e169      	b.n	8001308 <fsm_modify_timer_control+0x448>

		case MODIFY_GREEN1:

			//set mode to display
			mode = 4;
 8001034:	4b50      	ldr	r3, [pc, #320]	; (8001178 <fsm_modify_timer_control+0x2b8>)
 8001036:	2204      	movs	r2, #4
 8001038:	601a      	str	r2, [r3, #0]
			if(isTimer1Expired()) {
 800103a:	f000 fd77 	bl	8001b2c <isTimer1Expired>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d006      	beq.n	8001052 <fsm_modify_timer_control+0x192>
				setTimer1(100);
 8001044:	2064      	movs	r0, #100	; 0x64
 8001046:	f000 fc65 	bl	8001914 <setTimer1>
				toggleGreen1();
 800104a:	f7ff faf5 	bl	8000638 <toggleGreen1>
				toggleGreen2();
 800104e:	f7ff fb11 	bl	8000674 <toggleGreen2>
			}
			//check if user want to apply new duration1 and return auto mode
			if(isButtonPressed(RETURN)) {
 8001052:	2002      	movs	r0, #2
 8001054:	f000 fa84 	bl	8001560 <isButtonPressed>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00e      	beq.n	800107c <fsm_modify_timer_control+0x1bc>
				clearAllLed();
 800105e:	f7ff fb13 	bl	8000688 <clearAllLed>
				//set new duration1 for green led
				green_duration1 = time_input * 100;
 8001062:	4b46      	ldr	r3, [pc, #280]	; (800117c <fsm_modify_timer_control+0x2bc>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2264      	movs	r2, #100	; 0x64
 8001068:	fb02 f303 	mul.w	r3, r2, r3
 800106c:	4a47      	ldr	r2, [pc, #284]	; (800118c <fsm_modify_timer_control+0x2cc>)
 800106e:	6013      	str	r3, [r2, #0]
				time_input = 1;
 8001070:	4b42      	ldr	r3, [pc, #264]	; (800117c <fsm_modify_timer_control+0x2bc>)
 8001072:	2201      	movs	r2, #1
 8001074:	601a      	str	r2, [r3, #0]
				status3 = MODIFY_RED2;
 8001076:	4b3f      	ldr	r3, [pc, #252]	; (8001174 <fsm_modify_timer_control+0x2b4>)
 8001078:	220f      	movs	r2, #15
 800107a:	601a      	str	r2, [r3, #0]
			}

			//check if user want to increase time
			if(isButtonPressed(SET_TIME)) {
 800107c:	2001      	movs	r0, #1
 800107e:	f000 fa6f 	bl	8001560 <isButtonPressed>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d015      	beq.n	80010b4 <fsm_modify_timer_control+0x1f4>
				time_input = (time_input + 1) % 100; //99 is the max value
 8001088:	4b3c      	ldr	r3, [pc, #240]	; (800117c <fsm_modify_timer_control+0x2bc>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	1c5a      	adds	r2, r3, #1
 800108e:	4b3d      	ldr	r3, [pc, #244]	; (8001184 <fsm_modify_timer_control+0x2c4>)
 8001090:	fb83 1302 	smull	r1, r3, r3, r2
 8001094:	1159      	asrs	r1, r3, #5
 8001096:	17d3      	asrs	r3, r2, #31
 8001098:	1acb      	subs	r3, r1, r3
 800109a:	2164      	movs	r1, #100	; 0x64
 800109c:	fb01 f303 	mul.w	r3, r1, r3
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	4a36      	ldr	r2, [pc, #216]	; (800117c <fsm_modify_timer_control+0x2bc>)
 80010a4:	6013      	str	r3, [r2, #0]
				if(time_input == 0) time_input = 1; //1 is invalid value
 80010a6:	4b35      	ldr	r3, [pc, #212]	; (800117c <fsm_modify_timer_control+0x2bc>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d102      	bne.n	80010b4 <fsm_modify_timer_control+0x1f4>
 80010ae:	4b33      	ldr	r3, [pc, #204]	; (800117c <fsm_modify_timer_control+0x2bc>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	601a      	str	r2, [r3, #0]
			}

			//check if user want to change mode
			if(isButtonPressed(CONTROL_MODE)) {
 80010b4:	2000      	movs	r0, #0
 80010b6:	f000 fa53 	bl	8001560 <isButtonPressed>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 8125 	beq.w	800130c <fsm_modify_timer_control+0x44c>
				clearAllLed();
 80010c2:	f7ff fae1 	bl	8000688 <clearAllLed>
				time_input = 1;
 80010c6:	4b2d      	ldr	r3, [pc, #180]	; (800117c <fsm_modify_timer_control+0x2bc>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	601a      	str	r2, [r3, #0]
				status3 = MODIFY_RED2;
 80010cc:	4b29      	ldr	r3, [pc, #164]	; (8001174 <fsm_modify_timer_control+0x2b4>)
 80010ce:	220f      	movs	r2, #15
 80010d0:	601a      	str	r2, [r3, #0]
			}
			break;
 80010d2:	e11b      	b.n	800130c <fsm_modify_timer_control+0x44c>

		case MODIFY_RED2:

			//set mode to display
			mode = 5;
 80010d4:	4b28      	ldr	r3, [pc, #160]	; (8001178 <fsm_modify_timer_control+0x2b8>)
 80010d6:	2205      	movs	r2, #5
 80010d8:	601a      	str	r2, [r3, #0]
			if(isTimer1Expired()) {
 80010da:	f000 fd27 	bl	8001b2c <isTimer1Expired>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d006      	beq.n	80010f2 <fsm_modify_timer_control+0x232>
				setTimer1(100);
 80010e4:	2064      	movs	r0, #100	; 0x64
 80010e6:	f000 fc15 	bl	8001914 <setTimer1>
				toggleRed1();
 80010ea:	f7ff fa91 	bl	8000610 <toggleRed1>
				toggleRed2();
 80010ee:	f7ff faad 	bl	800064c <toggleRed2>
			}
			//check if user want to apply new duration1 and return auto mode
			if(isButtonPressed(RETURN)) {
 80010f2:	2002      	movs	r0, #2
 80010f4:	f000 fa34 	bl	8001560 <isButtonPressed>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00e      	beq.n	800111c <fsm_modify_timer_control+0x25c>
				clearAllLed();
 80010fe:	f7ff fac3 	bl	8000688 <clearAllLed>
				//set new duration1 for green led
				red_duration2 = time_input * 100;
 8001102:	4b1e      	ldr	r3, [pc, #120]	; (800117c <fsm_modify_timer_control+0x2bc>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2264      	movs	r2, #100	; 0x64
 8001108:	fb02 f303 	mul.w	r3, r2, r3
 800110c:	4a20      	ldr	r2, [pc, #128]	; (8001190 <fsm_modify_timer_control+0x2d0>)
 800110e:	6013      	str	r3, [r2, #0]
				time_input = 1;
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <fsm_modify_timer_control+0x2bc>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]
				status3 = MODIFY_YELLOW2;
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <fsm_modify_timer_control+0x2b4>)
 8001118:	2210      	movs	r2, #16
 800111a:	601a      	str	r2, [r3, #0]
			}

			//check if user want to increase time
			if(isButtonPressed(SET_TIME)) {
 800111c:	2001      	movs	r0, #1
 800111e:	f000 fa1f 	bl	8001560 <isButtonPressed>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d015      	beq.n	8001154 <fsm_modify_timer_control+0x294>
				time_input = (time_input + 1) % 100; //99 is the max value
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <fsm_modify_timer_control+0x2bc>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <fsm_modify_timer_control+0x2c4>)
 8001130:	fb83 1302 	smull	r1, r3, r3, r2
 8001134:	1159      	asrs	r1, r3, #5
 8001136:	17d3      	asrs	r3, r2, #31
 8001138:	1acb      	subs	r3, r1, r3
 800113a:	2164      	movs	r1, #100	; 0x64
 800113c:	fb01 f303 	mul.w	r3, r1, r3
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	4a0e      	ldr	r2, [pc, #56]	; (800117c <fsm_modify_timer_control+0x2bc>)
 8001144:	6013      	str	r3, [r2, #0]
				if(time_input == 0) time_input = 1; //1 is invalid value
 8001146:	4b0d      	ldr	r3, [pc, #52]	; (800117c <fsm_modify_timer_control+0x2bc>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d102      	bne.n	8001154 <fsm_modify_timer_control+0x294>
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <fsm_modify_timer_control+0x2bc>)
 8001150:	2201      	movs	r2, #1
 8001152:	601a      	str	r2, [r3, #0]
			}

			//check if user want to change mode
			if(isButtonPressed(CONTROL_MODE)) {
 8001154:	2000      	movs	r0, #0
 8001156:	f000 fa03 	bl	8001560 <isButtonPressed>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 80d7 	beq.w	8001310 <fsm_modify_timer_control+0x450>
				clearAllLed();
 8001162:	f7ff fa91 	bl	8000688 <clearAllLed>
				time_input = 1;
 8001166:	4b05      	ldr	r3, [pc, #20]	; (800117c <fsm_modify_timer_control+0x2bc>)
 8001168:	2201      	movs	r2, #1
 800116a:	601a      	str	r2, [r3, #0]
				status3 = MODIFY_YELLOW2;
 800116c:	4b01      	ldr	r3, [pc, #4]	; (8001174 <fsm_modify_timer_control+0x2b4>)
 800116e:	2210      	movs	r2, #16
 8001170:	601a      	str	r2, [r3, #0]
			}
			break;
 8001172:	e0cd      	b.n	8001310 <fsm_modify_timer_control+0x450>
 8001174:	20000010 	.word	0x20000010
 8001178:	20000030 	.word	0x20000030
 800117c:	2000002c 	.word	0x2000002c
 8001180:	20000014 	.word	0x20000014
 8001184:	51eb851f 	.word	0x51eb851f
 8001188:	20000018 	.word	0x20000018
 800118c:	2000001c 	.word	0x2000001c
 8001190:	20000020 	.word	0x20000020

		case MODIFY_YELLOW2:
			//set mode to display
			mode = 6;
 8001194:	4b62      	ldr	r3, [pc, #392]	; (8001320 <fsm_modify_timer_control+0x460>)
 8001196:	2206      	movs	r2, #6
 8001198:	601a      	str	r2, [r3, #0]
			if(isTimer1Expired()) {
 800119a:	f000 fcc7 	bl	8001b2c <isTimer1Expired>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d006      	beq.n	80011b2 <fsm_modify_timer_control+0x2f2>
				setTimer1(100);
 80011a4:	2064      	movs	r0, #100	; 0x64
 80011a6:	f000 fbb5 	bl	8001914 <setTimer1>
				toggleYellow1();
 80011aa:	f7ff fa3b 	bl	8000624 <toggleYellow1>
				toggleYellow2();
 80011ae:	f7ff fa57 	bl	8000660 <toggleYellow2>
			}

			//check if user want to apply new duration1 and return auto mode
			if(isButtonPressed(RETURN)){
 80011b2:	2002      	movs	r0, #2
 80011b4:	f000 f9d4 	bl	8001560 <isButtonPressed>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00e      	beq.n	80011dc <fsm_modify_timer_control+0x31c>
				clearAllLed();
 80011be:	f7ff fa63 	bl	8000688 <clearAllLed>
				//set new duration1 for yellow led
				yellow_duration2 = time_input * 100;
 80011c2:	4b58      	ldr	r3, [pc, #352]	; (8001324 <fsm_modify_timer_control+0x464>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2264      	movs	r2, #100	; 0x64
 80011c8:	fb02 f303 	mul.w	r3, r2, r3
 80011cc:	4a56      	ldr	r2, [pc, #344]	; (8001328 <fsm_modify_timer_control+0x468>)
 80011ce:	6013      	str	r3, [r2, #0]
				time_input = 1;
 80011d0:	4b54      	ldr	r3, [pc, #336]	; (8001324 <fsm_modify_timer_control+0x464>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	601a      	str	r2, [r3, #0]
				status3 = MODIFY_GREEN2;
 80011d6:	4b55      	ldr	r3, [pc, #340]	; (800132c <fsm_modify_timer_control+0x46c>)
 80011d8:	2211      	movs	r2, #17
 80011da:	601a      	str	r2, [r3, #0]
			}

			//check if user want to increase time
			if(isButtonPressed(SET_TIME)) {
 80011dc:	2001      	movs	r0, #1
 80011de:	f000 f9bf 	bl	8001560 <isButtonPressed>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d015      	beq.n	8001214 <fsm_modify_timer_control+0x354>
				time_input = (time_input + 1) % 100; //99 is the max value
 80011e8:	4b4e      	ldr	r3, [pc, #312]	; (8001324 <fsm_modify_timer_control+0x464>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	1c5a      	adds	r2, r3, #1
 80011ee:	4b50      	ldr	r3, [pc, #320]	; (8001330 <fsm_modify_timer_control+0x470>)
 80011f0:	fb83 1302 	smull	r1, r3, r3, r2
 80011f4:	1159      	asrs	r1, r3, #5
 80011f6:	17d3      	asrs	r3, r2, #31
 80011f8:	1acb      	subs	r3, r1, r3
 80011fa:	2164      	movs	r1, #100	; 0x64
 80011fc:	fb01 f303 	mul.w	r3, r1, r3
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	4a48      	ldr	r2, [pc, #288]	; (8001324 <fsm_modify_timer_control+0x464>)
 8001204:	6013      	str	r3, [r2, #0]
				if(time_input == 0) time_input = 1; //0 is invalid value
 8001206:	4b47      	ldr	r3, [pc, #284]	; (8001324 <fsm_modify_timer_control+0x464>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <fsm_modify_timer_control+0x354>
 800120e:	4b45      	ldr	r3, [pc, #276]	; (8001324 <fsm_modify_timer_control+0x464>)
 8001210:	2201      	movs	r2, #1
 8001212:	601a      	str	r2, [r3, #0]
			}

			//check if user want to change mode
			if(isButtonPressed(CONTROL_MODE)) {
 8001214:	2000      	movs	r0, #0
 8001216:	f000 f9a3 	bl	8001560 <isButtonPressed>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d079      	beq.n	8001314 <fsm_modify_timer_control+0x454>
				clearAllLed();
 8001220:	f7ff fa32 	bl	8000688 <clearAllLed>
				time_input = 1;
 8001224:	4b3f      	ldr	r3, [pc, #252]	; (8001324 <fsm_modify_timer_control+0x464>)
 8001226:	2201      	movs	r2, #1
 8001228:	601a      	str	r2, [r3, #0]
				status3 = MODIFY_GREEN2;
 800122a:	4b40      	ldr	r3, [pc, #256]	; (800132c <fsm_modify_timer_control+0x46c>)
 800122c:	2211      	movs	r2, #17
 800122e:	601a      	str	r2, [r3, #0]
			}
			break;
 8001230:	e070      	b.n	8001314 <fsm_modify_timer_control+0x454>

		case MODIFY_GREEN2:
			//set mode to display
			mode = 7;
 8001232:	4b3b      	ldr	r3, [pc, #236]	; (8001320 <fsm_modify_timer_control+0x460>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
			if(isTimer1Expired()) {
 8001238:	f000 fc78 	bl	8001b2c <isTimer1Expired>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d006      	beq.n	8001250 <fsm_modify_timer_control+0x390>
				setTimer1(100);
 8001242:	2064      	movs	r0, #100	; 0x64
 8001244:	f000 fb66 	bl	8001914 <setTimer1>
				toggleGreen1();
 8001248:	f7ff f9f6 	bl	8000638 <toggleGreen1>
				toggleGreen2();
 800124c:	f7ff fa12 	bl	8000674 <toggleGreen2>
			}
			//check if user want to apply new duration1 and return auto mode
			if(isButtonPressed(RETURN)) {
 8001250:	2002      	movs	r0, #2
 8001252:	f000 f985 	bl	8001560 <isButtonPressed>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d01a      	beq.n	8001292 <fsm_modify_timer_control+0x3d2>
				clearAllLed();
 800125c:	f7ff fa14 	bl	8000688 <clearAllLed>
				//set new duration1 for green led
				green_duration2 = time_input * 100;
 8001260:	4b30      	ldr	r3, [pc, #192]	; (8001324 <fsm_modify_timer_control+0x464>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2264      	movs	r2, #100	; 0x64
 8001266:	fb02 f303 	mul.w	r3, r2, r3
 800126a:	4a32      	ldr	r2, [pc, #200]	; (8001334 <fsm_modify_timer_control+0x474>)
 800126c:	6013      	str	r3, [r2, #0]
				time_input = 1;
 800126e:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <fsm_modify_timer_control+0x464>)
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]
				//turn on return flag for the fsm auto can change it's state
				returnFlag1 = 1;
 8001274:	4b30      	ldr	r3, [pc, #192]	; (8001338 <fsm_modify_timer_control+0x478>)
 8001276:	2201      	movs	r2, #1
 8001278:	601a      	str	r2, [r3, #0]
				returnFlag2 = 1;
 800127a:	4b30      	ldr	r3, [pc, #192]	; (800133c <fsm_modify_timer_control+0x47c>)
 800127c:	2201      	movs	r2, #1
 800127e:	601a      	str	r2, [r3, #0]
				status3 = WAIT;
 8001280:	4b2a      	ldr	r3, [pc, #168]	; (800132c <fsm_modify_timer_control+0x46c>)
 8001282:	2212      	movs	r2, #18
 8001284:	601a      	str	r2, [r3, #0]
				//set display pointer back to normal
				set1 = &timeCountdown1;
 8001286:	4b2e      	ldr	r3, [pc, #184]	; (8001340 <fsm_modify_timer_control+0x480>)
 8001288:	4a2e      	ldr	r2, [pc, #184]	; (8001344 <fsm_modify_timer_control+0x484>)
 800128a:	601a      	str	r2, [r3, #0]
				set2 = &timeCountdown2;
 800128c:	4b2e      	ldr	r3, [pc, #184]	; (8001348 <fsm_modify_timer_control+0x488>)
 800128e:	4a2f      	ldr	r2, [pc, #188]	; (800134c <fsm_modify_timer_control+0x48c>)
 8001290:	601a      	str	r2, [r3, #0]
			}

			//check if user want to increase time
			if(isButtonPressed(SET_TIME)) {
 8001292:	2001      	movs	r0, #1
 8001294:	f000 f964 	bl	8001560 <isButtonPressed>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d015      	beq.n	80012ca <fsm_modify_timer_control+0x40a>
				time_input = (time_input + 1) % 100; //99 is the max value
 800129e:	4b21      	ldr	r3, [pc, #132]	; (8001324 <fsm_modify_timer_control+0x464>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	4b22      	ldr	r3, [pc, #136]	; (8001330 <fsm_modify_timer_control+0x470>)
 80012a6:	fb83 1302 	smull	r1, r3, r3, r2
 80012aa:	1159      	asrs	r1, r3, #5
 80012ac:	17d3      	asrs	r3, r2, #31
 80012ae:	1acb      	subs	r3, r1, r3
 80012b0:	2164      	movs	r1, #100	; 0x64
 80012b2:	fb01 f303 	mul.w	r3, r1, r3
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	4a1a      	ldr	r2, [pc, #104]	; (8001324 <fsm_modify_timer_control+0x464>)
 80012ba:	6013      	str	r3, [r2, #0]
				if(time_input == 0) time_input = 1; //1 is invalid value
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <fsm_modify_timer_control+0x464>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d102      	bne.n	80012ca <fsm_modify_timer_control+0x40a>
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <fsm_modify_timer_control+0x464>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	601a      	str	r2, [r3, #0]
			}

			//check if user want to change mode
			if(isButtonPressed(CONTROL_MODE)){
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 f948 	bl	8001560 <isButtonPressed>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d020      	beq.n	8001318 <fsm_modify_timer_control+0x458>
				time_input = 1;
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <fsm_modify_timer_control+0x464>)
 80012d8:	2201      	movs	r2, #1
 80012da:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80012dc:	f7ff f9d4 	bl	8000688 <clearAllLed>
				returnFlag1 = 1;
 80012e0:	4b15      	ldr	r3, [pc, #84]	; (8001338 <fsm_modify_timer_control+0x478>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]
				returnFlag2 = 1;
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <fsm_modify_timer_control+0x47c>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]
				status3 = WAIT;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <fsm_modify_timer_control+0x46c>)
 80012ee:	2212      	movs	r2, #18
 80012f0:	601a      	str	r2, [r3, #0]
				//set display pointer back to normal
				set1 = &timeCountdown1;
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <fsm_modify_timer_control+0x480>)
 80012f4:	4a13      	ldr	r2, [pc, #76]	; (8001344 <fsm_modify_timer_control+0x484>)
 80012f6:	601a      	str	r2, [r3, #0]
				set2 = &timeCountdown2;
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <fsm_modify_timer_control+0x488>)
 80012fa:	4a14      	ldr	r2, [pc, #80]	; (800134c <fsm_modify_timer_control+0x48c>)
 80012fc:	601a      	str	r2, [r3, #0]
			}
			break;
 80012fe:	e00b      	b.n	8001318 <fsm_modify_timer_control+0x458>
		case WAIT:
			//DO NOTHING
			break;

		default:
			break;
 8001300:	bf00      	nop
 8001302:	e00a      	b.n	800131a <fsm_modify_timer_control+0x45a>
			break;
 8001304:	bf00      	nop
 8001306:	e008      	b.n	800131a <fsm_modify_timer_control+0x45a>
			break;
 8001308:	bf00      	nop
 800130a:	e006      	b.n	800131a <fsm_modify_timer_control+0x45a>
			break;
 800130c:	bf00      	nop
 800130e:	e004      	b.n	800131a <fsm_modify_timer_control+0x45a>
			break;
 8001310:	bf00      	nop
 8001312:	e002      	b.n	800131a <fsm_modify_timer_control+0x45a>
			break;
 8001314:	bf00      	nop
 8001316:	e000      	b.n	800131a <fsm_modify_timer_control+0x45a>
			break;
 8001318:	bf00      	nop
	}
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000030 	.word	0x20000030
 8001324:	2000002c 	.word	0x2000002c
 8001328:	20000024 	.word	0x20000024
 800132c:	20000010 	.word	0x20000010
 8001330:	51eb851f 	.word	0x51eb851f
 8001334:	20000028 	.word	0x20000028
 8001338:	20000074 	.word	0x20000074
 800133c:	20000078 	.word	0x20000078
 8001340:	200000c4 	.word	0x200000c4
 8001344:	2000006c 	.word	0x2000006c
 8001348:	200000c0 	.word	0x200000c0
 800134c:	20000070 	.word	0x20000070

08001350 <systemInit>:

int returnFlag1 = 0;
int returnFlag2 = 0;


void systemInit(){
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	initButton();
 8001354:	f000 f838 	bl	80013c8 <initButton>
	GPIOB -> ODR = 0xffff;
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <systemInit+0x70>)
 800135a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800135e:	60da      	str	r2, [r3, #12]
	setTimer0(10);
 8001360:	200a      	movs	r0, #10
 8001362:	f000 fac3 	bl	80018ec <setTimer0>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001366:	2201      	movs	r2, #1
 8001368:	f44f 7180 	mov.w	r1, #256	; 0x100
 800136c:	4815      	ldr	r0, [pc, #84]	; (80013c4 <systemInit+0x74>)
 800136e:	f000 ff4c 	bl	800220a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001372:	2201      	movs	r2, #1
 8001374:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001378:	4812      	ldr	r0, [pc, #72]	; (80013c4 <systemInit+0x74>)
 800137a:	f000 ff46 	bl	800220a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	2104      	movs	r1, #4
 8001382:	4810      	ldr	r0, [pc, #64]	; (80013c4 <systemInit+0x74>)
 8001384:	f000 ff41 	bl	800220a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8001388:	2201      	movs	r2, #1
 800138a:	2108      	movs	r1, #8
 800138c:	480d      	ldr	r0, [pc, #52]	; (80013c4 <systemInit+0x74>)
 800138e:	f000 ff3c 	bl	800220a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8001392:	2201      	movs	r2, #1
 8001394:	2110      	movs	r1, #16
 8001396:	480b      	ldr	r0, [pc, #44]	; (80013c4 <systemInit+0x74>)
 8001398:	f000 ff37 	bl	800220a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 800139c:	2201      	movs	r2, #1
 800139e:	2120      	movs	r1, #32
 80013a0:	4808      	ldr	r0, [pc, #32]	; (80013c4 <systemInit+0x74>)
 80013a2:	f000 ff32 	bl	800220a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 80013a6:	2201      	movs	r2, #1
 80013a8:	2140      	movs	r1, #64	; 0x40
 80013aa:	4806      	ldr	r0, [pc, #24]	; (80013c4 <systemInit+0x74>)
 80013ac:	f000 ff2d 	bl	800220a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2180      	movs	r1, #128	; 0x80
 80013b4:	4803      	ldr	r0, [pc, #12]	; (80013c4 <systemInit+0x74>)
 80013b6:	f000 ff28 	bl	800220a <HAL_GPIO_WritePin>
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40010c00 	.word	0x40010c00
 80013c4:	40010800 	.word	0x40010800

080013c8 <initButton>:
//user definition input port and input pin
#define INPUT_PORT GPIOA
uint16_t buttonPin[NO_OF_BUTTONS] = {0x2000, 0x4000, 0x8000};


void initButton(){
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
	//clear all buffers, counters and flags
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++){
 80013ce:	2300      	movs	r3, #0
 80013d0:	71fb      	strb	r3, [r7, #7]
 80013d2:	e020      	b.n	8001416 <initButton+0x4e>
		debounceButtonBuffer1[i] 	= BUTTON_IS_RELEASED;
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	4a14      	ldr	r2, [pc, #80]	; (8001428 <initButton+0x60>)
 80013d8:	2101      	movs	r1, #1
 80013da:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] 	= BUTTON_IS_RELEASED;
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	4a13      	ldr	r2, [pc, #76]	; (800142c <initButton+0x64>)
 80013e0:	2101      	movs	r1, #1
 80013e2:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer3[i] 	= BUTTON_IS_RELEASED;
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	4a12      	ldr	r2, [pc, #72]	; (8001430 <initButton+0x68>)
 80013e8:	2101      	movs	r1, #1
 80013ea:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer4[i] 	= BUTTON_IS_RELEASED;
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	4a11      	ldr	r2, [pc, #68]	; (8001434 <initButton+0x6c>)
 80013f0:	2101      	movs	r1, #1
 80013f2:	54d1      	strb	r1, [r2, r3]
		buttonFlags[i] 				= BUTTON_FLAG_CLEAR;
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	4a10      	ldr	r2, [pc, #64]	; (8001438 <initButton+0x70>)
 80013f8:	2100      	movs	r1, #0
 80013fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		flagForButtonPress1s[i] 	= BUTTON_FLAG_CLEAR;
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	4a0e      	ldr	r2, [pc, #56]	; (800143c <initButton+0x74>)
 8001402:	2100      	movs	r1, #0
 8001404:	54d1      	strb	r1, [r2, r3]
		counterForButtonPress1s[i] 	= 0;
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <initButton+0x78>)
 800140a:	2100      	movs	r1, #0
 800140c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++){
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	3301      	adds	r3, #1
 8001414:	71fb      	strb	r3, [r7, #7]
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d9db      	bls.n	80013d4 <initButton+0xc>
	}
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	2000007c 	.word	0x2000007c
 800142c:	20000080 	.word	0x20000080
 8001430:	20000084 	.word	0x20000084
 8001434:	20000088 	.word	0x20000088
 8001438:	200000c8 	.word	0x200000c8
 800143c:	2000008c 	.word	0x2000008c
 8001440:	20000090 	.word	0x20000090

08001444 <button_reading>:

void button_reading (void) {
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++){
 800144a:	2300      	movs	r3, #0
 800144c:	71fb      	strb	r3, [r7, #7]
 800144e:	e06b      	b.n	8001528 <button_reading+0xe4>
		//propagate buffer stage 2 to stage 3
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8001450:	79fa      	ldrb	r2, [r7, #7]
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	4938      	ldr	r1, [pc, #224]	; (8001538 <button_reading+0xf4>)
 8001456:	5c89      	ldrb	r1, [r1, r2]
 8001458:	4a38      	ldr	r2, [pc, #224]	; (800153c <button_reading+0xf8>)
 800145a:	54d1      	strb	r1, [r2, r3]
		//propagate buffer stage 1 to stage 2
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800145c:	79fa      	ldrb	r2, [r7, #7]
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	4937      	ldr	r1, [pc, #220]	; (8001540 <button_reading+0xfc>)
 8001462:	5c89      	ldrb	r1, [r1, r2]
 8001464:	4a34      	ldr	r2, [pc, #208]	; (8001538 <button_reading+0xf4>)
 8001466:	54d1      	strb	r1, [r2, r3]
		//update the lasted button state in buffer 1
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(INPUT_PORT, buttonPin[i]);
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	4a36      	ldr	r2, [pc, #216]	; (8001544 <button_reading+0x100>)
 800146c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001470:	79fc      	ldrb	r4, [r7, #7]
 8001472:	4619      	mov	r1, r3
 8001474:	4834      	ldr	r0, [pc, #208]	; (8001548 <button_reading+0x104>)
 8001476:	f000 feb1 	bl	80021dc <HAL_GPIO_ReadPin>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	4b30      	ldr	r3, [pc, #192]	; (8001540 <button_reading+0xfc>)
 8001480:	551a      	strb	r2, [r3, r4]
		if((debounceButtonBuffer2[i] == debounceButtonBuffer1[i]) && (debounceButtonBuffer2[i] == debounceButtonBuffer3[i])){
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	4a2c      	ldr	r2, [pc, #176]	; (8001538 <button_reading+0xf4>)
 8001486:	5cd2      	ldrb	r2, [r2, r3]
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	492d      	ldr	r1, [pc, #180]	; (8001540 <button_reading+0xfc>)
 800148c:	5ccb      	ldrb	r3, [r1, r3]
 800148e:	429a      	cmp	r2, r3
 8001490:	d147      	bne.n	8001522 <button_reading+0xde>
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	4a28      	ldr	r2, [pc, #160]	; (8001538 <button_reading+0xf4>)
 8001496:	5cd2      	ldrb	r2, [r2, r3]
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	4928      	ldr	r1, [pc, #160]	; (800153c <button_reading+0xf8>)
 800149c:	5ccb      	ldrb	r3, [r1, r3]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d13f      	bne.n	8001522 <button_reading+0xde>
			if(debounceButtonBuffer3[i] != debounceButtonBuffer4[i]){
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	4a25      	ldr	r2, [pc, #148]	; (800153c <button_reading+0xf8>)
 80014a6:	5cd2      	ldrb	r2, [r2, r3]
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	4928      	ldr	r1, [pc, #160]	; (800154c <button_reading+0x108>)
 80014ac:	5ccb      	ldrb	r3, [r1, r3]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d023      	beq.n	80014fa <button_reading+0xb6>
				debounceButtonBuffer4[i] = debounceButtonBuffer3[i];
 80014b2:	79fa      	ldrb	r2, [r7, #7]
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	4921      	ldr	r1, [pc, #132]	; (800153c <button_reading+0xf8>)
 80014b8:	5c89      	ldrb	r1, [r1, r2]
 80014ba:	4a24      	ldr	r2, [pc, #144]	; (800154c <button_reading+0x108>)
 80014bc:	54d1      	strb	r1, [r2, r3]
				if(debounceButtonBuffer4[i] == BUTTON_IS_PRESSED){
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	4a22      	ldr	r2, [pc, #136]	; (800154c <button_reading+0x108>)
 80014c2:	5cd3      	ldrb	r3, [r2, r3]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d109      	bne.n	80014dc <button_reading+0x98>
					TimeOutForKeyPress = 500;
 80014c8:	4b21      	ldr	r3, [pc, #132]	; (8001550 <button_reading+0x10c>)
 80014ca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014ce:	601a      	str	r2, [r3, #0]
					buttonFlags[i] = BUTTON_FLAG_SET;
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	4a20      	ldr	r2, [pc, #128]	; (8001554 <button_reading+0x110>)
 80014d4:	2101      	movs	r1, #1
 80014d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80014da:	e022      	b.n	8001522 <button_reading+0xde>
				} else {
					TimeOutForKeyPress--;
 80014dc:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <button_reading+0x10c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	4a1b      	ldr	r2, [pc, #108]	; (8001550 <button_reading+0x10c>)
 80014e4:	6013      	str	r3, [r2, #0]
					counterForButtonPress1s[i] = 0;
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	4a1b      	ldr	r2, [pc, #108]	; (8001558 <button_reading+0x114>)
 80014ea:	2100      	movs	r1, #0
 80014ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					debounceButtonBuffer4[i] = BUTTON_IS_RELEASED;
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	4a16      	ldr	r2, [pc, #88]	; (800154c <button_reading+0x108>)
 80014f4:	2101      	movs	r1, #1
 80014f6:	54d1      	strb	r1, [r2, r3]
 80014f8:	e013      	b.n	8001522 <button_reading+0xde>
				}
			} else {
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	4a16      	ldr	r2, [pc, #88]	; (8001558 <button_reading+0x114>)
 80014fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001502:	2b63      	cmp	r3, #99	; 0x63
 8001504:	d809      	bhi.n	800151a <button_reading+0xd6>
					counterForButtonPress1s[i]++;
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	4a13      	ldr	r2, [pc, #76]	; (8001558 <button_reading+0x114>)
 800150a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800150e:	3201      	adds	r2, #1
 8001510:	b291      	uxth	r1, r2
 8001512:	4a11      	ldr	r2, [pc, #68]	; (8001558 <button_reading+0x114>)
 8001514:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001518:	e003      	b.n	8001522 <button_reading+0xde>
				} else flagForButtonPress1s[i] = BUTTON_FLAG_SET;
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	4a0f      	ldr	r2, [pc, #60]	; (800155c <button_reading+0x118>)
 800151e:	2101      	movs	r1, #1
 8001520:	54d1      	strb	r1, [r2, r3]
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++){
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	3301      	adds	r3, #1
 8001526:	71fb      	strb	r3, [r7, #7]
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d990      	bls.n	8001450 <button_reading+0xc>
			}
		}
	}
}
 800152e:	bf00      	nop
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	bd90      	pop	{r4, r7, pc}
 8001538:	20000080 	.word	0x20000080
 800153c:	20000084 	.word	0x20000084
 8001540:	2000007c 	.word	0x2000007c
 8001544:	20000038 	.word	0x20000038
 8001548:	40010800 	.word	0x40010800
 800154c:	20000088 	.word	0x20000088
 8001550:	20000034 	.word	0x20000034
 8001554:	200000c8 	.word	0x200000c8
 8001558:	20000090 	.word	0x20000090
 800155c:	2000008c 	.word	0x2000008c

08001560 <isButtonPressed>:

unsigned char isButtonPressed(unsigned char index){
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <isButtonPressed+0x14>
 8001570:	2300      	movs	r3, #0
 8001572:	e00d      	b.n	8001590 <isButtonPressed+0x30>
	if(buttonFlags[index] == BUTTON_FLAG_SET){
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	4a09      	ldr	r2, [pc, #36]	; (800159c <isButtonPressed+0x3c>)
 8001578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d106      	bne.n	800158e <isButtonPressed+0x2e>
		//clear button flags and return
		buttonFlags[index] = BUTTON_FLAG_CLEAR;
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	4a06      	ldr	r2, [pc, #24]	; (800159c <isButtonPressed+0x3c>)
 8001584:	2100      	movs	r1, #0
 8001586:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <isButtonPressed+0x30>
	} else return 0;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	200000c8 	.word	0x200000c8

080015a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a4:	f000 fb30 	bl	8001c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a8:	f000 f814 	bl	80015d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80015ac:	f000 f84e 	bl	800164c <MX_TIM2_Init>
  MX_GPIO_Init();
 80015b0:	f000 f898 	bl	80016e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80015b4:	4806      	ldr	r0, [pc, #24]	; (80015d0 <main+0x30>)
 80015b6:	f001 fa91 	bl	8002adc <HAL_TIM_Base_Start_IT>
  systemInit();
 80015ba:	f7ff fec9 	bl	8001350 <systemInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm1_automatic_run();
 80015be:	f7ff f887 	bl	80006d0 <fsm1_automatic_run>
	  fsm2_automatic_run();
 80015c2:	f7ff fa81 	bl	8000ac8 <fsm2_automatic_run>
	  fsm_modify_timer_control();
 80015c6:	f7ff fc7b 	bl	8000ec0 <fsm_modify_timer_control>
	  update7Segment();
 80015ca:	f7fe ff17 	bl	80003fc <update7Segment>
	  fsm1_automatic_run();
 80015ce:	e7f6      	b.n	80015be <main+0x1e>
 80015d0:	200000d4 	.word	0x200000d4

080015d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b090      	sub	sp, #64	; 0x40
 80015d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015da:	f107 0318 	add.w	r3, r7, #24
 80015de:	2228      	movs	r2, #40	; 0x28
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 fe32 	bl	800324c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015fa:	2301      	movs	r3, #1
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015fe:	2310      	movs	r3, #16
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001602:	2300      	movs	r3, #0
 8001604:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001606:	f107 0318 	add.w	r3, r7, #24
 800160a:	4618      	mov	r0, r3
 800160c:	f000 fe2e 	bl	800226c <HAL_RCC_OscConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001616:	f000 f8d5 	bl	80017c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800161a:	230f      	movs	r3, #15
 800161c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f001 f89a 	bl	800276c <HAL_RCC_ClockConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800163e:	f000 f8c1 	bl	80017c4 <Error_Handler>
  }
}
 8001642:	bf00      	nop
 8001644:	3740      	adds	r7, #64	; 0x40
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001652:	f107 0308 	add.w	r3, r7, #8
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001660:	463b      	mov	r3, r7
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001668:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <MX_TIM2_Init+0x94>)
 800166a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800166e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <MX_TIM2_Init+0x94>)
 8001672:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001676:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <MX_TIM2_Init+0x94>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <MX_TIM2_Init+0x94>)
 8001680:	220a      	movs	r2, #10
 8001682:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <MX_TIM2_Init+0x94>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <MX_TIM2_Init+0x94>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001690:	4813      	ldr	r0, [pc, #76]	; (80016e0 <MX_TIM2_Init+0x94>)
 8001692:	f001 f9d3 	bl	8002a3c <HAL_TIM_Base_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800169c:	f000 f892 	bl	80017c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	4619      	mov	r1, r3
 80016ac:	480c      	ldr	r0, [pc, #48]	; (80016e0 <MX_TIM2_Init+0x94>)
 80016ae:	f001 fb69 	bl	8002d84 <HAL_TIM_ConfigClockSource>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016b8:	f000 f884 	bl	80017c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016bc:	2300      	movs	r3, #0
 80016be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016c4:	463b      	mov	r3, r7
 80016c6:	4619      	mov	r1, r3
 80016c8:	4805      	ldr	r0, [pc, #20]	; (80016e0 <MX_TIM2_Init+0x94>)
 80016ca:	f001 fd31 	bl	8003130 <HAL_TIMEx_MasterConfigSynchronization>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016d4:	f000 f876 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200000d4 	.word	0x200000d4

080016e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f8:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <MX_GPIO_Init+0xbc>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	4a28      	ldr	r2, [pc, #160]	; (80017a0 <MX_GPIO_Init+0xbc>)
 80016fe:	f043 0304 	orr.w	r3, r3, #4
 8001702:	6193      	str	r3, [r2, #24]
 8001704:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <MX_GPIO_Init+0xbc>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001710:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <MX_GPIO_Init+0xbc>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <MX_GPIO_Init+0xbc>)
 8001716:	f043 0308 	orr.w	r3, r3, #8
 800171a:	6193      	str	r3, [r2, #24]
 800171c:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <MX_GPIO_Init+0xbc>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8001728:	2200      	movs	r2, #0
 800172a:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 800172e:	481d      	ldr	r0, [pc, #116]	; (80017a4 <MX_GPIO_Init+0xc0>)
 8001730:	f000 fd6b 	bl	800220a <HAL_GPIO_WritePin>
                          |YELLOW2_Pin|GREEN2_Pin|EN0_Pin|EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a1_Pin|b1_Pin|c1_Pin|c2_Pin
 8001734:	2200      	movs	r2, #0
 8001736:	f647 717f 	movw	r1, #32639	; 0x7f7f
 800173a:	481b      	ldr	r0, [pc, #108]	; (80017a8 <MX_GPIO_Init+0xc4>)
 800173c:	f000 fd65 	bl	800220a <HAL_GPIO_WritePin>
                          |d1_Pin|e1_Pin|f1_Pin|g1_Pin
                          |b2_Pin|a2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin EN0_Pin EN1_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8001740:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8001744:	60bb      	str	r3, [r7, #8]
                          |YELLOW2_Pin|GREEN2_Pin|EN0_Pin|EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001746:	2301      	movs	r3, #1
 8001748:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2302      	movs	r3, #2
 8001750:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	4619      	mov	r1, r3
 8001758:	4812      	ldr	r0, [pc, #72]	; (80017a4 <MX_GPIO_Init+0xc0>)
 800175a:	f000 fbc5 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : a1_Pin b1_Pin c1_Pin c2_Pin
                           d2_Pin e2_Pin f2_Pin g2_Pin
                           d1_Pin e1_Pin f1_Pin g1_Pin
                           b2_Pin a2_Pin */
  GPIO_InitStruct.Pin = a1_Pin|b1_Pin|c1_Pin|c2_Pin
 800175e:	f647 737f 	movw	r3, #32639	; 0x7f7f
 8001762:	60bb      	str	r3, [r7, #8]
                          |d2_Pin|e2_Pin|f2_Pin|g2_Pin
                          |d1_Pin|e1_Pin|f1_Pin|g1_Pin
                          |b2_Pin|a2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001764:	2301      	movs	r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2302      	movs	r3, #2
 800176e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001770:	f107 0308 	add.w	r3, r7, #8
 8001774:	4619      	mov	r1, r3
 8001776:	480c      	ldr	r0, [pc, #48]	; (80017a8 <MX_GPIO_Init+0xc4>)
 8001778:	f000 fbb6 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button0_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button0_Pin|Button1_Pin|Button2_Pin;
 800177c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001780:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001786:	2301      	movs	r3, #1
 8001788:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f107 0308 	add.w	r3, r7, #8
 800178e:	4619      	mov	r1, r3
 8001790:	4804      	ldr	r0, [pc, #16]	; (80017a4 <MX_GPIO_Init+0xc0>)
 8001792:	f000 fba9 	bl	8001ee8 <HAL_GPIO_Init>

}
 8001796:	bf00      	nop
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010800 	.word	0x40010800
 80017a8:	40010c00 	.word	0x40010c00

080017ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	timerRun();
 80017b4:	f000 f93e 	bl	8001a34 <timerRun>
	button_reading();
 80017b8:	f7ff fe44 	bl	8001444 <button_reading>
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c8:	b672      	cpsid	i
}
 80017ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017cc:	e7fe      	b.n	80017cc <Error_Handler+0x8>
	...

080017d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_MspInit+0x5c>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	4a14      	ldr	r2, [pc, #80]	; (800182c <HAL_MspInit+0x5c>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6193      	str	r3, [r2, #24]
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_MspInit+0x5c>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <HAL_MspInit+0x5c>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	4a0e      	ldr	r2, [pc, #56]	; (800182c <HAL_MspInit+0x5c>)
 80017f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f8:	61d3      	str	r3, [r2, #28]
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <HAL_MspInit+0x5c>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_MspInit+0x60>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	4a04      	ldr	r2, [pc, #16]	; (8001830 <HAL_MspInit+0x60>)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	40021000 	.word	0x40021000
 8001830:	40010000 	.word	0x40010000

08001834 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001844:	d113      	bne.n	800186e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <HAL_TIM_Base_MspInit+0x44>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <HAL_TIM_Base_MspInit+0x44>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	61d3      	str	r3, [r2, #28]
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_TIM_Base_MspInit+0x44>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	201c      	movs	r0, #28
 8001864:	f000 fb09 	bl	8001e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001868:	201c      	movs	r0, #28
 800186a:	f000 fb22 	bl	8001eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000

0800187c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <NMI_Handler+0x4>

08001882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <HardFault_Handler+0x4>

08001888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <MemManage_Handler+0x4>

0800188e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001892:	e7fe      	b.n	8001892 <BusFault_Handler+0x4>

08001894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001898:	e7fe      	b.n	8001898 <UsageFault_Handler+0x4>

0800189a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr

080018a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr

080018be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c2:	f000 f9e7 	bl	8001c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <TIM2_IRQHandler+0x10>)
 80018d2:	f001 f94f 	bl	8002b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200000d4 	.word	0x200000d4

080018e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <setTimer0>:
int timer1_flag = 0;
int timer2_flag = 0;
int timer3_flag = 0;
int timer4_flag = 0;

void setTimer0(int duration){
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	timer0_cnt = duration;
 80018f4:	4a05      	ldr	r2, [pc, #20]	; (800190c <setTimer0+0x20>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 80018fa:	4b05      	ldr	r3, [pc, #20]	; (8001910 <setTimer0+0x24>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000098 	.word	0x20000098
 8001910:	200000ac 	.word	0x200000ac

08001914 <setTimer1>:

void setTimer1(int duration){
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	timer1_cnt = duration;
 800191c:	4a05      	ldr	r2, [pc, #20]	; (8001934 <setTimer1+0x20>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001922:	4b05      	ldr	r3, [pc, #20]	; (8001938 <setTimer1+0x24>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	2000009c 	.word	0x2000009c
 8001938:	200000b0 	.word	0x200000b0

0800193c <setTimer2>:
void setTimer2(int duration){
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	timer2_cnt = duration;
 8001944:	4a05      	ldr	r2, [pc, #20]	; (800195c <setTimer2+0x20>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800194a:	4b05      	ldr	r3, [pc, #20]	; (8001960 <setTimer2+0x24>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	200000a0 	.word	0x200000a0
 8001960:	200000b4 	.word	0x200000b4

08001964 <setTimer3>:

void setTimer3(int duration){
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	timer3_cnt = duration;
 800196c:	4a05      	ldr	r2, [pc, #20]	; (8001984 <setTimer3+0x20>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <setTimer3+0x24>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	200000a4 	.word	0x200000a4
 8001988:	200000b8 	.word	0x200000b8

0800198c <setTimer4>:

void setTimer4(int duration){
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	timer4_cnt = duration;
 8001994:	4a05      	ldr	r2, [pc, #20]	; (80019ac <setTimer4+0x20>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <setTimer4+0x24>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	200000a8 	.word	0x200000a8
 80019b0:	200000bc 	.word	0x200000bc

080019b4 <clearTimer1>:
void clearTimer0(){
	timer0_cnt = 0;
	timer0_flag = 0;
}

void clearTimer1(){
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
	timer1_cnt = 0;
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <clearTimer1+0x18>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
	timer1_flag = 0;
 80019be:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <clearTimer1+0x1c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	2000009c 	.word	0x2000009c
 80019d0:	200000b0 	.word	0x200000b0

080019d4 <clearTimer2>:

void clearTimer2(){
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
	timer2_cnt = 0;
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <clearTimer2+0x18>)
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
	timer2_flag = 0;
 80019de:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <clearTimer2+0x1c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	200000a0 	.word	0x200000a0
 80019f0:	200000b4 	.word	0x200000b4

080019f4 <clearTimer3>:

void clearTimer3(){
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
	timer3_cnt = 0;
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <clearTimer3+0x18>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
	timer3_flag = 0;
 80019fe:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <clearTimer3+0x1c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	200000a4 	.word	0x200000a4
 8001a10:	200000b8 	.word	0x200000b8

08001a14 <clearTimer4>:

void clearTimer4(){
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
	timer4_cnt = 0;
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <clearTimer4+0x18>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
	timer4_flag = 0;
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <clearTimer4+0x1c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	200000a8 	.word	0x200000a8
 8001a30:	200000bc 	.word	0x200000bc

08001a34 <timerRun>:

void timerRun(){
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
	if(timer0_cnt > 0){
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <timerRun+0xac>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	dd0b      	ble.n	8001a58 <timerRun+0x24>
		timer0_cnt--;
 8001a40:	4b27      	ldr	r3, [pc, #156]	; (8001ae0 <timerRun+0xac>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	4a26      	ldr	r2, [pc, #152]	; (8001ae0 <timerRun+0xac>)
 8001a48:	6013      	str	r3, [r2, #0]
		if(timer0_cnt <= 0) timer0_flag = 1;
 8001a4a:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <timerRun+0xac>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	dc02      	bgt.n	8001a58 <timerRun+0x24>
 8001a52:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <timerRun+0xb0>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	601a      	str	r2, [r3, #0]
	}
	if(timer1_cnt > 0){
 8001a58:	4b23      	ldr	r3, [pc, #140]	; (8001ae8 <timerRun+0xb4>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	dd0b      	ble.n	8001a78 <timerRun+0x44>
		timer1_cnt--;
 8001a60:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <timerRun+0xb4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	4a20      	ldr	r2, [pc, #128]	; (8001ae8 <timerRun+0xb4>)
 8001a68:	6013      	str	r3, [r2, #0]
		if(timer1_cnt <= 0) timer1_flag = 1;
 8001a6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <timerRun+0xb4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	dc02      	bgt.n	8001a78 <timerRun+0x44>
 8001a72:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <timerRun+0xb8>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	601a      	str	r2, [r3, #0]
	}
	if(timer2_cnt > 0){
 8001a78:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <timerRun+0xbc>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	dd0b      	ble.n	8001a98 <timerRun+0x64>
		timer2_cnt--;
 8001a80:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <timerRun+0xbc>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	4a1a      	ldr	r2, [pc, #104]	; (8001af0 <timerRun+0xbc>)
 8001a88:	6013      	str	r3, [r2, #0]
		if(timer2_cnt <= 0) timer2_flag = 1;
 8001a8a:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <timerRun+0xbc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	dc02      	bgt.n	8001a98 <timerRun+0x64>
 8001a92:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <timerRun+0xc0>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
	}
	if(timer3_cnt > 0){
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <timerRun+0xc4>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	dd0b      	ble.n	8001ab8 <timerRun+0x84>
		timer3_cnt--;
 8001aa0:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <timerRun+0xc4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	4a14      	ldr	r2, [pc, #80]	; (8001af8 <timerRun+0xc4>)
 8001aa8:	6013      	str	r3, [r2, #0]
		if(timer3_cnt <= 0) timer3_flag = 1;
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <timerRun+0xc4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	dc02      	bgt.n	8001ab8 <timerRun+0x84>
 8001ab2:	4b12      	ldr	r3, [pc, #72]	; (8001afc <timerRun+0xc8>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]
	}
	if(timer4_cnt > 0){
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <timerRun+0xcc>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	dd0b      	ble.n	8001ad8 <timerRun+0xa4>
		timer4_cnt--;
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <timerRun+0xcc>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	4a0e      	ldr	r2, [pc, #56]	; (8001b00 <timerRun+0xcc>)
 8001ac8:	6013      	str	r3, [r2, #0]
		if(timer4_cnt == 0) timer4_flag = 1;
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <timerRun+0xcc>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d102      	bne.n	8001ad8 <timerRun+0xa4>
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <timerRun+0xd0>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]
	}
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr
 8001ae0:	20000098 	.word	0x20000098
 8001ae4:	200000ac 	.word	0x200000ac
 8001ae8:	2000009c 	.word	0x2000009c
 8001aec:	200000b0 	.word	0x200000b0
 8001af0:	200000a0 	.word	0x200000a0
 8001af4:	200000b4 	.word	0x200000b4
 8001af8:	200000a4 	.word	0x200000a4
 8001afc:	200000b8 	.word	0x200000b8
 8001b00:	200000a8 	.word	0x200000a8
 8001b04:	200000bc 	.word	0x200000bc

08001b08 <isTimer0Expired>:

int isTimer0Expired(){
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
	if(timer0_flag == 1){
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <isTimer0Expired+0x20>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d104      	bne.n	8001b1e <isTimer0Expired+0x16>
		timer0_flag = 0;
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <isTimer0Expired+0x20>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
		return 1;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <isTimer0Expired+0x18>
	} else return 0;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	200000ac 	.word	0x200000ac

08001b2c <isTimer1Expired>:

int isTimer1Expired(){
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
	if(timer1_flag == 1){
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <isTimer1Expired+0x20>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d104      	bne.n	8001b42 <isTimer1Expired+0x16>
		timer1_flag = 0;
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <isTimer1Expired+0x20>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
		return 1;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <isTimer1Expired+0x18>
	} else return 0;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	200000b0 	.word	0x200000b0

08001b50 <isTimer2Expired>:

int isTimer2Expired(){
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
	if(timer2_flag == 1){
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <isTimer2Expired+0x20>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d104      	bne.n	8001b66 <isTimer2Expired+0x16>
		timer2_flag = 0;
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <isTimer2Expired+0x20>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
		return 1;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <isTimer2Expired+0x18>
	} else return 0;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr
 8001b70:	200000b4 	.word	0x200000b4

08001b74 <isTimer3Expired>:

int isTimer3Expired(){
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <isTimer3Expired+0x20>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d104      	bne.n	8001b8a <isTimer3Expired+0x16>
		timer3_flag = 0;
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <isTimer3Expired+0x20>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
		return 1;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <isTimer3Expired+0x18>
	} else return 0;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	200000b8 	.word	0x200000b8

08001b98 <isTimer4Expired>:

int isTimer4Expired(){
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
	if(timer4_flag == 1){
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <isTimer4Expired+0x20>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d104      	bne.n	8001bae <isTimer4Expired+0x16>
		timer4_flag = 0;
 8001ba4:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <isTimer4Expired+0x20>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
		return 1;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <isTimer4Expired+0x18>
	} else return 0;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	200000bc 	.word	0x200000bc

08001bbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bbc:	480c      	ldr	r0, [pc, #48]	; (8001bf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bbe:	490d      	ldr	r1, [pc, #52]	; (8001bf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc4:	e002      	b.n	8001bcc <LoopCopyDataInit>

08001bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bca:	3304      	adds	r3, #4

08001bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd0:	d3f9      	bcc.n	8001bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bd4:	4c0a      	ldr	r4, [pc, #40]	; (8001c00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd8:	e001      	b.n	8001bde <LoopFillZerobss>

08001bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bdc:	3204      	adds	r2, #4

08001bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be0:	d3fb      	bcc.n	8001bda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001be2:	f7ff fe7d 	bl	80018e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001be6:	f001 fb0d 	bl	8003204 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bea:	f7ff fcd9 	bl	80015a0 <main>
  bx lr
 8001bee:	4770      	bx	lr
  ldr r0, =_sdata
 8001bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf4:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8001bf8:	0800329c 	.word	0x0800329c
  ldr r2, =_sbss
 8001bfc:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8001c00:	20000120 	.word	0x20000120

08001c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c04:	e7fe      	b.n	8001c04 <ADC1_2_IRQHandler>
	...

08001c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <HAL_Init+0x28>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a07      	ldr	r2, [pc, #28]	; (8001c30 <HAL_Init+0x28>)
 8001c12:	f043 0310 	orr.w	r3, r3, #16
 8001c16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f000 f923 	bl	8001e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c1e:	200f      	movs	r0, #15
 8001c20:	f000 f808 	bl	8001c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c24:	f7ff fdd4 	bl	80017d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40022000 	.word	0x40022000

08001c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_InitTick+0x54>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_InitTick+0x58>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	4619      	mov	r1, r3
 8001c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 f93b 	bl	8001ece <HAL_SYSTICK_Config>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00e      	b.n	8001c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b0f      	cmp	r3, #15
 8001c66:	d80a      	bhi.n	8001c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	f000 f903 	bl	8001e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c74:	4a06      	ldr	r2, [pc, #24]	; (8001c90 <HAL_InitTick+0x5c>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e000      	b.n	8001c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000040 	.word	0x20000040
 8001c8c:	20000048 	.word	0x20000048
 8001c90:	20000044 	.word	0x20000044

08001c94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_IncTick+0x1c>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_IncTick+0x20>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4a03      	ldr	r2, [pc, #12]	; (8001cb4 <HAL_IncTick+0x20>)
 8001ca6:	6013      	str	r3, [r2, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	20000048 	.word	0x20000048
 8001cb4:	2000011c 	.word	0x2000011c

08001cb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return uwTick;
 8001cbc:	4b02      	ldr	r3, [pc, #8]	; (8001cc8 <HAL_GetTick+0x10>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	2000011c 	.word	0x2000011c

08001ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfe:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	60d3      	str	r3, [r2, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <__NVIC_GetPriorityGrouping+0x18>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	f003 0307 	and.w	r3, r3, #7
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	db0b      	blt.n	8001d5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	f003 021f 	and.w	r2, r3, #31
 8001d48:	4906      	ldr	r1, [pc, #24]	; (8001d64 <__NVIC_EnableIRQ+0x34>)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	2001      	movs	r0, #1
 8001d52:	fa00 f202 	lsl.w	r2, r0, r2
 8001d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	e000e100 	.word	0xe000e100

08001d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	db0a      	blt.n	8001d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	490c      	ldr	r1, [pc, #48]	; (8001db4 <__NVIC_SetPriority+0x4c>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	0112      	lsls	r2, r2, #4
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d90:	e00a      	b.n	8001da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4908      	ldr	r1, [pc, #32]	; (8001db8 <__NVIC_SetPriority+0x50>)
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	3b04      	subs	r3, #4
 8001da0:	0112      	lsls	r2, r2, #4
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	440b      	add	r3, r1
 8001da6:	761a      	strb	r2, [r3, #24]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000e100 	.word	0xe000e100
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	; 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f1c3 0307 	rsb	r3, r3, #7
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	bf28      	it	cs
 8001dda:	2304      	movcs	r3, #4
 8001ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3304      	adds	r3, #4
 8001de2:	2b06      	cmp	r3, #6
 8001de4:	d902      	bls.n	8001dec <NVIC_EncodePriority+0x30>
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3b03      	subs	r3, #3
 8001dea:	e000      	b.n	8001dee <NVIC_EncodePriority+0x32>
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	f04f 32ff 	mov.w	r2, #4294967295
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43da      	mvns	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	401a      	ands	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e04:	f04f 31ff 	mov.w	r1, #4294967295
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0e:	43d9      	mvns	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	4313      	orrs	r3, r2
         );
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3724      	adds	r7, #36	; 0x24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e30:	d301      	bcc.n	8001e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00f      	b.n	8001e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e36:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <SysTick_Config+0x40>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3e:	210f      	movs	r1, #15
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	f7ff ff90 	bl	8001d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <SysTick_Config+0x40>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4e:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <SysTick_Config+0x40>)
 8001e50:	2207      	movs	r2, #7
 8001e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	e000e010 	.word	0xe000e010

08001e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff ff2d 	bl	8001ccc <__NVIC_SetPriorityGrouping>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b086      	sub	sp, #24
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4603      	mov	r3, r0
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e8c:	f7ff ff42 	bl	8001d14 <__NVIC_GetPriorityGrouping>
 8001e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68b9      	ldr	r1, [r7, #8]
 8001e96:	6978      	ldr	r0, [r7, #20]
 8001e98:	f7ff ff90 	bl	8001dbc <NVIC_EncodePriority>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff5f 	bl	8001d68 <__NVIC_SetPriority>
}
 8001eaa:	bf00      	nop
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff35 	bl	8001d30 <__NVIC_EnableIRQ>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff ffa2 	bl	8001e20 <SysTick_Config>
 8001edc:	4603      	mov	r3, r0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b08b      	sub	sp, #44	; 0x2c
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001efa:	e148      	b.n	800218e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001efc:	2201      	movs	r2, #1
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	f040 8137 	bne.w	8002188 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	4aa3      	ldr	r2, [pc, #652]	; (80021ac <HAL_GPIO_Init+0x2c4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d05e      	beq.n	8001fe2 <HAL_GPIO_Init+0xfa>
 8001f24:	4aa1      	ldr	r2, [pc, #644]	; (80021ac <HAL_GPIO_Init+0x2c4>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d875      	bhi.n	8002016 <HAL_GPIO_Init+0x12e>
 8001f2a:	4aa1      	ldr	r2, [pc, #644]	; (80021b0 <HAL_GPIO_Init+0x2c8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d058      	beq.n	8001fe2 <HAL_GPIO_Init+0xfa>
 8001f30:	4a9f      	ldr	r2, [pc, #636]	; (80021b0 <HAL_GPIO_Init+0x2c8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d86f      	bhi.n	8002016 <HAL_GPIO_Init+0x12e>
 8001f36:	4a9f      	ldr	r2, [pc, #636]	; (80021b4 <HAL_GPIO_Init+0x2cc>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d052      	beq.n	8001fe2 <HAL_GPIO_Init+0xfa>
 8001f3c:	4a9d      	ldr	r2, [pc, #628]	; (80021b4 <HAL_GPIO_Init+0x2cc>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d869      	bhi.n	8002016 <HAL_GPIO_Init+0x12e>
 8001f42:	4a9d      	ldr	r2, [pc, #628]	; (80021b8 <HAL_GPIO_Init+0x2d0>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d04c      	beq.n	8001fe2 <HAL_GPIO_Init+0xfa>
 8001f48:	4a9b      	ldr	r2, [pc, #620]	; (80021b8 <HAL_GPIO_Init+0x2d0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d863      	bhi.n	8002016 <HAL_GPIO_Init+0x12e>
 8001f4e:	4a9b      	ldr	r2, [pc, #620]	; (80021bc <HAL_GPIO_Init+0x2d4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d046      	beq.n	8001fe2 <HAL_GPIO_Init+0xfa>
 8001f54:	4a99      	ldr	r2, [pc, #612]	; (80021bc <HAL_GPIO_Init+0x2d4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d85d      	bhi.n	8002016 <HAL_GPIO_Init+0x12e>
 8001f5a:	2b12      	cmp	r3, #18
 8001f5c:	d82a      	bhi.n	8001fb4 <HAL_GPIO_Init+0xcc>
 8001f5e:	2b12      	cmp	r3, #18
 8001f60:	d859      	bhi.n	8002016 <HAL_GPIO_Init+0x12e>
 8001f62:	a201      	add	r2, pc, #4	; (adr r2, 8001f68 <HAL_GPIO_Init+0x80>)
 8001f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f68:	08001fe3 	.word	0x08001fe3
 8001f6c:	08001fbd 	.word	0x08001fbd
 8001f70:	08001fcf 	.word	0x08001fcf
 8001f74:	08002011 	.word	0x08002011
 8001f78:	08002017 	.word	0x08002017
 8001f7c:	08002017 	.word	0x08002017
 8001f80:	08002017 	.word	0x08002017
 8001f84:	08002017 	.word	0x08002017
 8001f88:	08002017 	.word	0x08002017
 8001f8c:	08002017 	.word	0x08002017
 8001f90:	08002017 	.word	0x08002017
 8001f94:	08002017 	.word	0x08002017
 8001f98:	08002017 	.word	0x08002017
 8001f9c:	08002017 	.word	0x08002017
 8001fa0:	08002017 	.word	0x08002017
 8001fa4:	08002017 	.word	0x08002017
 8001fa8:	08002017 	.word	0x08002017
 8001fac:	08001fc5 	.word	0x08001fc5
 8001fb0:	08001fd9 	.word	0x08001fd9
 8001fb4:	4a82      	ldr	r2, [pc, #520]	; (80021c0 <HAL_GPIO_Init+0x2d8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d013      	beq.n	8001fe2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fba:	e02c      	b.n	8002016 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	623b      	str	r3, [r7, #32]
          break;
 8001fc2:	e029      	b.n	8002018 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	623b      	str	r3, [r7, #32]
          break;
 8001fcc:	e024      	b.n	8002018 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	3308      	adds	r3, #8
 8001fd4:	623b      	str	r3, [r7, #32]
          break;
 8001fd6:	e01f      	b.n	8002018 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	330c      	adds	r3, #12
 8001fde:	623b      	str	r3, [r7, #32]
          break;
 8001fe0:	e01a      	b.n	8002018 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d102      	bne.n	8001ff0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fea:	2304      	movs	r3, #4
 8001fec:	623b      	str	r3, [r7, #32]
          break;
 8001fee:	e013      	b.n	8002018 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d105      	bne.n	8002004 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ff8:	2308      	movs	r3, #8
 8001ffa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	611a      	str	r2, [r3, #16]
          break;
 8002002:	e009      	b.n	8002018 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002004:	2308      	movs	r3, #8
 8002006:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	615a      	str	r2, [r3, #20]
          break;
 800200e:	e003      	b.n	8002018 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002010:	2300      	movs	r3, #0
 8002012:	623b      	str	r3, [r7, #32]
          break;
 8002014:	e000      	b.n	8002018 <HAL_GPIO_Init+0x130>
          break;
 8002016:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	2bff      	cmp	r3, #255	; 0xff
 800201c:	d801      	bhi.n	8002022 <HAL_GPIO_Init+0x13a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	e001      	b.n	8002026 <HAL_GPIO_Init+0x13e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3304      	adds	r3, #4
 8002026:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	2bff      	cmp	r3, #255	; 0xff
 800202c:	d802      	bhi.n	8002034 <HAL_GPIO_Init+0x14c>
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	e002      	b.n	800203a <HAL_GPIO_Init+0x152>
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	3b08      	subs	r3, #8
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	210f      	movs	r1, #15
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	fa01 f303 	lsl.w	r3, r1, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	401a      	ands	r2, r3
 800204c:	6a39      	ldr	r1, [r7, #32]
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	fa01 f303 	lsl.w	r3, r1, r3
 8002054:	431a      	orrs	r2, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 8090 	beq.w	8002188 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002068:	4b56      	ldr	r3, [pc, #344]	; (80021c4 <HAL_GPIO_Init+0x2dc>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	4a55      	ldr	r2, [pc, #340]	; (80021c4 <HAL_GPIO_Init+0x2dc>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	6193      	str	r3, [r2, #24]
 8002074:	4b53      	ldr	r3, [pc, #332]	; (80021c4 <HAL_GPIO_Init+0x2dc>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002080:	4a51      	ldr	r2, [pc, #324]	; (80021c8 <HAL_GPIO_Init+0x2e0>)
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	3302      	adds	r3, #2
 8002088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	220f      	movs	r2, #15
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4013      	ands	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a49      	ldr	r2, [pc, #292]	; (80021cc <HAL_GPIO_Init+0x2e4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d00d      	beq.n	80020c8 <HAL_GPIO_Init+0x1e0>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a48      	ldr	r2, [pc, #288]	; (80021d0 <HAL_GPIO_Init+0x2e8>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d007      	beq.n	80020c4 <HAL_GPIO_Init+0x1dc>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a47      	ldr	r2, [pc, #284]	; (80021d4 <HAL_GPIO_Init+0x2ec>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d101      	bne.n	80020c0 <HAL_GPIO_Init+0x1d8>
 80020bc:	2302      	movs	r3, #2
 80020be:	e004      	b.n	80020ca <HAL_GPIO_Init+0x1e2>
 80020c0:	2303      	movs	r3, #3
 80020c2:	e002      	b.n	80020ca <HAL_GPIO_Init+0x1e2>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <HAL_GPIO_Init+0x1e2>
 80020c8:	2300      	movs	r3, #0
 80020ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020cc:	f002 0203 	and.w	r2, r2, #3
 80020d0:	0092      	lsls	r2, r2, #2
 80020d2:	4093      	lsls	r3, r2
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020da:	493b      	ldr	r1, [pc, #236]	; (80021c8 <HAL_GPIO_Init+0x2e0>)
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	089b      	lsrs	r3, r3, #2
 80020e0:	3302      	adds	r3, #2
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d006      	beq.n	8002102 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020f4:	4b38      	ldr	r3, [pc, #224]	; (80021d8 <HAL_GPIO_Init+0x2f0>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4937      	ldr	r1, [pc, #220]	; (80021d8 <HAL_GPIO_Init+0x2f0>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	600b      	str	r3, [r1, #0]
 8002100:	e006      	b.n	8002110 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002102:	4b35      	ldr	r3, [pc, #212]	; (80021d8 <HAL_GPIO_Init+0x2f0>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	43db      	mvns	r3, r3
 800210a:	4933      	ldr	r1, [pc, #204]	; (80021d8 <HAL_GPIO_Init+0x2f0>)
 800210c:	4013      	ands	r3, r2
 800210e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d006      	beq.n	800212a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800211c:	4b2e      	ldr	r3, [pc, #184]	; (80021d8 <HAL_GPIO_Init+0x2f0>)
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	492d      	ldr	r1, [pc, #180]	; (80021d8 <HAL_GPIO_Init+0x2f0>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
 8002128:	e006      	b.n	8002138 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800212a:	4b2b      	ldr	r3, [pc, #172]	; (80021d8 <HAL_GPIO_Init+0x2f0>)
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	43db      	mvns	r3, r3
 8002132:	4929      	ldr	r1, [pc, #164]	; (80021d8 <HAL_GPIO_Init+0x2f0>)
 8002134:	4013      	ands	r3, r2
 8002136:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d006      	beq.n	8002152 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002144:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <HAL_GPIO_Init+0x2f0>)
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	4923      	ldr	r1, [pc, #140]	; (80021d8 <HAL_GPIO_Init+0x2f0>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	608b      	str	r3, [r1, #8]
 8002150:	e006      	b.n	8002160 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002152:	4b21      	ldr	r3, [pc, #132]	; (80021d8 <HAL_GPIO_Init+0x2f0>)
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	43db      	mvns	r3, r3
 800215a:	491f      	ldr	r1, [pc, #124]	; (80021d8 <HAL_GPIO_Init+0x2f0>)
 800215c:	4013      	ands	r3, r2
 800215e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800216c:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <HAL_GPIO_Init+0x2f0>)
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	4919      	ldr	r1, [pc, #100]	; (80021d8 <HAL_GPIO_Init+0x2f0>)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	60cb      	str	r3, [r1, #12]
 8002178:	e006      	b.n	8002188 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800217a:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <HAL_GPIO_Init+0x2f0>)
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	43db      	mvns	r3, r3
 8002182:	4915      	ldr	r1, [pc, #84]	; (80021d8 <HAL_GPIO_Init+0x2f0>)
 8002184:	4013      	ands	r3, r2
 8002186:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	3301      	adds	r3, #1
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	f47f aeaf 	bne.w	8001efc <HAL_GPIO_Init+0x14>
  }
}
 800219e:	bf00      	nop
 80021a0:	bf00      	nop
 80021a2:	372c      	adds	r7, #44	; 0x2c
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	10320000 	.word	0x10320000
 80021b0:	10310000 	.word	0x10310000
 80021b4:	10220000 	.word	0x10220000
 80021b8:	10210000 	.word	0x10210000
 80021bc:	10120000 	.word	0x10120000
 80021c0:	10110000 	.word	0x10110000
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40010000 	.word	0x40010000
 80021cc:	40010800 	.word	0x40010800
 80021d0:	40010c00 	.word	0x40010c00
 80021d4:	40011000 	.word	0x40011000
 80021d8:	40010400 	.word	0x40010400

080021dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	887b      	ldrh	r3, [r7, #2]
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
 80021f8:	e001      	b.n	80021fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021fa:	2300      	movs	r3, #0
 80021fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr

0800220a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	460b      	mov	r3, r1
 8002214:	807b      	strh	r3, [r7, #2]
 8002216:	4613      	mov	r3, r2
 8002218:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800221a:	787b      	ldrb	r3, [r7, #1]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002220:	887a      	ldrh	r2, [r7, #2]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002226:	e003      	b.n	8002230 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002228:	887b      	ldrh	r3, [r7, #2]
 800222a:	041a      	lsls	r2, r3, #16
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	611a      	str	r2, [r3, #16]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr

0800223a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800223a:	b480      	push	{r7}
 800223c:	b085      	sub	sp, #20
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	460b      	mov	r3, r1
 8002244:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800224c:	887a      	ldrh	r2, [r7, #2]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4013      	ands	r3, r2
 8002252:	041a      	lsls	r2, r3, #16
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	43d9      	mvns	r1, r3
 8002258:	887b      	ldrh	r3, [r7, #2]
 800225a:	400b      	ands	r3, r1
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	611a      	str	r2, [r3, #16]
}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e26c      	b.n	8002758 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 8087 	beq.w	800239a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800228c:	4b92      	ldr	r3, [pc, #584]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 030c 	and.w	r3, r3, #12
 8002294:	2b04      	cmp	r3, #4
 8002296:	d00c      	beq.n	80022b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002298:	4b8f      	ldr	r3, [pc, #572]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d112      	bne.n	80022ca <HAL_RCC_OscConfig+0x5e>
 80022a4:	4b8c      	ldr	r3, [pc, #560]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b0:	d10b      	bne.n	80022ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b2:	4b89      	ldr	r3, [pc, #548]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d06c      	beq.n	8002398 <HAL_RCC_OscConfig+0x12c>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d168      	bne.n	8002398 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e246      	b.n	8002758 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d2:	d106      	bne.n	80022e2 <HAL_RCC_OscConfig+0x76>
 80022d4:	4b80      	ldr	r3, [pc, #512]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a7f      	ldr	r2, [pc, #508]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	e02e      	b.n	8002340 <HAL_RCC_OscConfig+0xd4>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10c      	bne.n	8002304 <HAL_RCC_OscConfig+0x98>
 80022ea:	4b7b      	ldr	r3, [pc, #492]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a7a      	ldr	r2, [pc, #488]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	4b78      	ldr	r3, [pc, #480]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a77      	ldr	r2, [pc, #476]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e01d      	b.n	8002340 <HAL_RCC_OscConfig+0xd4>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800230c:	d10c      	bne.n	8002328 <HAL_RCC_OscConfig+0xbc>
 800230e:	4b72      	ldr	r3, [pc, #456]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a71      	ldr	r2, [pc, #452]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	4b6f      	ldr	r3, [pc, #444]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a6e      	ldr	r2, [pc, #440]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e00b      	b.n	8002340 <HAL_RCC_OscConfig+0xd4>
 8002328:	4b6b      	ldr	r3, [pc, #428]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a6a      	ldr	r2, [pc, #424]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800232e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	4b68      	ldr	r3, [pc, #416]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a67      	ldr	r2, [pc, #412]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800233a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800233e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d013      	beq.n	8002370 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7ff fcb6 	bl	8001cb8 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002350:	f7ff fcb2 	bl	8001cb8 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e1fa      	b.n	8002758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	4b5d      	ldr	r3, [pc, #372]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0xe4>
 800236e:	e014      	b.n	800239a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7ff fca2 	bl	8001cb8 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002378:	f7ff fc9e 	bl	8001cb8 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	; 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e1e6      	b.n	8002758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238a:	4b53      	ldr	r3, [pc, #332]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x10c>
 8002396:	e000      	b.n	800239a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d063      	beq.n	800246e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023a6:	4b4c      	ldr	r3, [pc, #304]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00b      	beq.n	80023ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023b2:	4b49      	ldr	r3, [pc, #292]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d11c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x18c>
 80023be:	4b46      	ldr	r3, [pc, #280]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d116      	bne.n	80023f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ca:	4b43      	ldr	r3, [pc, #268]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <HAL_RCC_OscConfig+0x176>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e1ba      	b.n	8002758 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e2:	4b3d      	ldr	r3, [pc, #244]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4939      	ldr	r1, [pc, #228]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f6:	e03a      	b.n	800246e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d020      	beq.n	8002442 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002400:	4b36      	ldr	r3, [pc, #216]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002402:	2201      	movs	r2, #1
 8002404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002406:	f7ff fc57 	bl	8001cb8 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800240e:	f7ff fc53 	bl	8001cb8 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e19b      	b.n	8002758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002420:	4b2d      	ldr	r3, [pc, #180]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242c:	4b2a      	ldr	r3, [pc, #168]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4927      	ldr	r1, [pc, #156]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]
 8002440:	e015      	b.n	800246e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002442:	4b26      	ldr	r3, [pc, #152]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7ff fc36 	bl	8001cb8 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002450:	f7ff fc32 	bl	8001cb8 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e17a      	b.n	8002758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002462:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d03a      	beq.n	80024f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d019      	beq.n	80024b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002482:	4b17      	ldr	r3, [pc, #92]	; (80024e0 <HAL_RCC_OscConfig+0x274>)
 8002484:	2201      	movs	r2, #1
 8002486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002488:	f7ff fc16 	bl	8001cb8 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002490:	f7ff fc12 	bl	8001cb8 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e15a      	b.n	8002758 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024ae:	2001      	movs	r0, #1
 80024b0:	f000 faa6 	bl	8002a00 <RCC_Delay>
 80024b4:	e01c      	b.n	80024f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <HAL_RCC_OscConfig+0x274>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024bc:	f7ff fbfc 	bl	8001cb8 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c2:	e00f      	b.n	80024e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c4:	f7ff fbf8 	bl	8001cb8 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d908      	bls.n	80024e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e140      	b.n	8002758 <HAL_RCC_OscConfig+0x4ec>
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	42420000 	.word	0x42420000
 80024e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e4:	4b9e      	ldr	r3, [pc, #632]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1e9      	bne.n	80024c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80a6 	beq.w	800264a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002502:	4b97      	ldr	r3, [pc, #604]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10d      	bne.n	800252a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	4b94      	ldr	r3, [pc, #592]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	4a93      	ldr	r2, [pc, #588]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 8002514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002518:	61d3      	str	r3, [r2, #28]
 800251a:	4b91      	ldr	r3, [pc, #580]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002526:	2301      	movs	r3, #1
 8002528:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252a:	4b8e      	ldr	r3, [pc, #568]	; (8002764 <HAL_RCC_OscConfig+0x4f8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002532:	2b00      	cmp	r3, #0
 8002534:	d118      	bne.n	8002568 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002536:	4b8b      	ldr	r3, [pc, #556]	; (8002764 <HAL_RCC_OscConfig+0x4f8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a8a      	ldr	r2, [pc, #552]	; (8002764 <HAL_RCC_OscConfig+0x4f8>)
 800253c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002542:	f7ff fbb9 	bl	8001cb8 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254a:	f7ff fbb5 	bl	8001cb8 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b64      	cmp	r3, #100	; 0x64
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e0fd      	b.n	8002758 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255c:	4b81      	ldr	r3, [pc, #516]	; (8002764 <HAL_RCC_OscConfig+0x4f8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d106      	bne.n	800257e <HAL_RCC_OscConfig+0x312>
 8002570:	4b7b      	ldr	r3, [pc, #492]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4a7a      	ldr	r2, [pc, #488]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6213      	str	r3, [r2, #32]
 800257c:	e02d      	b.n	80025da <HAL_RCC_OscConfig+0x36e>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x334>
 8002586:	4b76      	ldr	r3, [pc, #472]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	4a75      	ldr	r2, [pc, #468]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 800258c:	f023 0301 	bic.w	r3, r3, #1
 8002590:	6213      	str	r3, [r2, #32]
 8002592:	4b73      	ldr	r3, [pc, #460]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	4a72      	ldr	r2, [pc, #456]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 8002598:	f023 0304 	bic.w	r3, r3, #4
 800259c:	6213      	str	r3, [r2, #32]
 800259e:	e01c      	b.n	80025da <HAL_RCC_OscConfig+0x36e>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	2b05      	cmp	r3, #5
 80025a6:	d10c      	bne.n	80025c2 <HAL_RCC_OscConfig+0x356>
 80025a8:	4b6d      	ldr	r3, [pc, #436]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	4a6c      	ldr	r2, [pc, #432]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 80025ae:	f043 0304 	orr.w	r3, r3, #4
 80025b2:	6213      	str	r3, [r2, #32]
 80025b4:	4b6a      	ldr	r3, [pc, #424]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	4a69      	ldr	r2, [pc, #420]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6213      	str	r3, [r2, #32]
 80025c0:	e00b      	b.n	80025da <HAL_RCC_OscConfig+0x36e>
 80025c2:	4b67      	ldr	r3, [pc, #412]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	4a66      	ldr	r2, [pc, #408]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	6213      	str	r3, [r2, #32]
 80025ce:	4b64      	ldr	r3, [pc, #400]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	4a63      	ldr	r2, [pc, #396]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 80025d4:	f023 0304 	bic.w	r3, r3, #4
 80025d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d015      	beq.n	800260e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e2:	f7ff fb69 	bl	8001cb8 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e8:	e00a      	b.n	8002600 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ea:	f7ff fb65 	bl	8001cb8 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e0ab      	b.n	8002758 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002600:	4b57      	ldr	r3, [pc, #348]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0ee      	beq.n	80025ea <HAL_RCC_OscConfig+0x37e>
 800260c:	e014      	b.n	8002638 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260e:	f7ff fb53 	bl	8001cb8 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002614:	e00a      	b.n	800262c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002616:	f7ff fb4f 	bl	8001cb8 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	f241 3288 	movw	r2, #5000	; 0x1388
 8002624:	4293      	cmp	r3, r2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e095      	b.n	8002758 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800262c:	4b4c      	ldr	r3, [pc, #304]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1ee      	bne.n	8002616 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002638:	7dfb      	ldrb	r3, [r7, #23]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d105      	bne.n	800264a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263e:	4b48      	ldr	r3, [pc, #288]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	4a47      	ldr	r2, [pc, #284]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 8002644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002648:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 8081 	beq.w	8002756 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002654:	4b42      	ldr	r3, [pc, #264]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 030c 	and.w	r3, r3, #12
 800265c:	2b08      	cmp	r3, #8
 800265e:	d061      	beq.n	8002724 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d146      	bne.n	80026f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002668:	4b3f      	ldr	r3, [pc, #252]	; (8002768 <HAL_RCC_OscConfig+0x4fc>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266e:	f7ff fb23 	bl	8001cb8 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002676:	f7ff fb1f 	bl	8001cb8 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e067      	b.n	8002758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002688:	4b35      	ldr	r3, [pc, #212]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f0      	bne.n	8002676 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269c:	d108      	bne.n	80026b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800269e:	4b30      	ldr	r3, [pc, #192]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	492d      	ldr	r1, [pc, #180]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026b0:	4b2b      	ldr	r3, [pc, #172]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a19      	ldr	r1, [r3, #32]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	430b      	orrs	r3, r1
 80026c2:	4927      	ldr	r1, [pc, #156]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c8:	4b27      	ldr	r3, [pc, #156]	; (8002768 <HAL_RCC_OscConfig+0x4fc>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ce:	f7ff faf3 	bl	8001cb8 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d6:	f7ff faef 	bl	8001cb8 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e037      	b.n	8002758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026e8:	4b1d      	ldr	r3, [pc, #116]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x46a>
 80026f4:	e02f      	b.n	8002756 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f6:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <HAL_RCC_OscConfig+0x4fc>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7ff fadc 	bl	8001cb8 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002704:	f7ff fad8 	bl	8001cb8 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e020      	b.n	8002758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002716:	4b12      	ldr	r3, [pc, #72]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x498>
 8002722:	e018      	b.n	8002756 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e013      	b.n	8002758 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <HAL_RCC_OscConfig+0x4f4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	429a      	cmp	r2, r3
 8002742:	d106      	bne.n	8002752 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274e:	429a      	cmp	r2, r3
 8002750:	d001      	beq.n	8002756 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40021000 	.word	0x40021000
 8002764:	40007000 	.word	0x40007000
 8002768:	42420060 	.word	0x42420060

0800276c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0d0      	b.n	8002922 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002780:	4b6a      	ldr	r3, [pc, #424]	; (800292c <HAL_RCC_ClockConfig+0x1c0>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d910      	bls.n	80027b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278e:	4b67      	ldr	r3, [pc, #412]	; (800292c <HAL_RCC_ClockConfig+0x1c0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 0207 	bic.w	r2, r3, #7
 8002796:	4965      	ldr	r1, [pc, #404]	; (800292c <HAL_RCC_ClockConfig+0x1c0>)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	4313      	orrs	r3, r2
 800279c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279e:	4b63      	ldr	r3, [pc, #396]	; (800292c <HAL_RCC_ClockConfig+0x1c0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d001      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0b8      	b.n	8002922 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d020      	beq.n	80027fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c8:	4b59      	ldr	r3, [pc, #356]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	4a58      	ldr	r2, [pc, #352]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027e0:	4b53      	ldr	r3, [pc, #332]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4a52      	ldr	r2, [pc, #328]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ec:	4b50      	ldr	r3, [pc, #320]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	494d      	ldr	r1, [pc, #308]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d040      	beq.n	800288c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d107      	bne.n	8002822 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002812:	4b47      	ldr	r3, [pc, #284]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d115      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e07f      	b.n	8002922 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d107      	bne.n	800283a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282a:	4b41      	ldr	r3, [pc, #260]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e073      	b.n	8002922 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283a:	4b3d      	ldr	r3, [pc, #244]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e06b      	b.n	8002922 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800284a:	4b39      	ldr	r3, [pc, #228]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f023 0203 	bic.w	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4936      	ldr	r1, [pc, #216]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800285c:	f7ff fa2c 	bl	8001cb8 <HAL_GetTick>
 8002860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002862:	e00a      	b.n	800287a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002864:	f7ff fa28 	bl	8001cb8 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e053      	b.n	8002922 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287a:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 020c 	and.w	r2, r3, #12
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	429a      	cmp	r2, r3
 800288a:	d1eb      	bne.n	8002864 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800288c:	4b27      	ldr	r3, [pc, #156]	; (800292c <HAL_RCC_ClockConfig+0x1c0>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d210      	bcs.n	80028bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289a:	4b24      	ldr	r3, [pc, #144]	; (800292c <HAL_RCC_ClockConfig+0x1c0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 0207 	bic.w	r2, r3, #7
 80028a2:	4922      	ldr	r1, [pc, #136]	; (800292c <HAL_RCC_ClockConfig+0x1c0>)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028aa:	4b20      	ldr	r3, [pc, #128]	; (800292c <HAL_RCC_ClockConfig+0x1c0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d001      	beq.n	80028bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e032      	b.n	8002922 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c8:	4b19      	ldr	r3, [pc, #100]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4916      	ldr	r1, [pc, #88]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d009      	beq.n	80028fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028e6:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	490e      	ldr	r1, [pc, #56]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028fa:	f000 f821 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 80028fe:	4602      	mov	r2, r0
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	490a      	ldr	r1, [pc, #40]	; (8002934 <HAL_RCC_ClockConfig+0x1c8>)
 800290c:	5ccb      	ldrb	r3, [r1, r3]
 800290e:	fa22 f303 	lsr.w	r3, r2, r3
 8002912:	4a09      	ldr	r2, [pc, #36]	; (8002938 <HAL_RCC_ClockConfig+0x1cc>)
 8002914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <HAL_RCC_ClockConfig+0x1d0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff f98a 	bl	8001c34 <HAL_InitTick>

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40022000 	.word	0x40022000
 8002930:	40021000 	.word	0x40021000
 8002934:	08003284 	.word	0x08003284
 8002938:	20000040 	.word	0x20000040
 800293c:	20000044 	.word	0x20000044

08002940 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002940:	b490      	push	{r4, r7}
 8002942:	b08a      	sub	sp, #40	; 0x28
 8002944:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002946:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002948:	1d3c      	adds	r4, r7, #4
 800294a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800294c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002950:	f240 2301 	movw	r3, #513	; 0x201
 8002954:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
 800295a:	2300      	movs	r3, #0
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	2300      	movs	r3, #0
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002966:	2300      	movs	r3, #0
 8002968:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800296a:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b04      	cmp	r3, #4
 8002978:	d002      	beq.n	8002980 <HAL_RCC_GetSysClockFreq+0x40>
 800297a:	2b08      	cmp	r3, #8
 800297c:	d003      	beq.n	8002986 <HAL_RCC_GetSysClockFreq+0x46>
 800297e:	e02d      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002980:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002982:	623b      	str	r3, [r7, #32]
      break;
 8002984:	e02d      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	0c9b      	lsrs	r3, r3, #18
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002992:	4413      	add	r3, r2
 8002994:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002998:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d013      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029a4:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	0c5b      	lsrs	r3, r3, #17
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029b2:	4413      	add	r3, r2
 80029b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	4a0e      	ldr	r2, [pc, #56]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029be:	fb02 f203 	mul.w	r2, r2, r3
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ca:	e004      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	4a0b      	ldr	r2, [pc, #44]	; (80029fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80029d0:	fb02 f303 	mul.w	r3, r2, r3
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	623b      	str	r3, [r7, #32]
      break;
 80029da:	e002      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029de:	623b      	str	r3, [r7, #32]
      break;
 80029e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e2:	6a3b      	ldr	r3, [r7, #32]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3728      	adds	r7, #40	; 0x28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc90      	pop	{r4, r7}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	08003274 	.word	0x08003274
 80029f4:	40021000 	.word	0x40021000
 80029f8:	007a1200 	.word	0x007a1200
 80029fc:	003d0900 	.word	0x003d0900

08002a00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a08:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <RCC_Delay+0x34>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a0a      	ldr	r2, [pc, #40]	; (8002a38 <RCC_Delay+0x38>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	0a5b      	lsrs	r3, r3, #9
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	fb02 f303 	mul.w	r3, r2, r3
 8002a1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a1c:	bf00      	nop
  }
  while (Delay --);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1e5a      	subs	r2, r3, #1
 8002a22:	60fa      	str	r2, [r7, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1f9      	bne.n	8002a1c <RCC_Delay+0x1c>
}
 8002a28:	bf00      	nop
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr
 8002a34:	20000040 	.word	0x20000040
 8002a38:	10624dd3 	.word	0x10624dd3

08002a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e041      	b.n	8002ad2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fe fee6 	bl	8001834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3304      	adds	r3, #4
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	f000 fa6a 	bl	8002f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d001      	beq.n	8002af4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e035      	b.n	8002b60 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a16      	ldr	r2, [pc, #88]	; (8002b6c <HAL_TIM_Base_Start_IT+0x90>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d009      	beq.n	8002b2a <HAL_TIM_Base_Start_IT+0x4e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1e:	d004      	beq.n	8002b2a <HAL_TIM_Base_Start_IT+0x4e>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a12      	ldr	r2, [pc, #72]	; (8002b70 <HAL_TIM_Base_Start_IT+0x94>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d111      	bne.n	8002b4e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2b06      	cmp	r3, #6
 8002b3a:	d010      	beq.n	8002b5e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b4c:	e007      	b.n	8002b5e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 0201 	orr.w	r2, r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40012c00 	.word	0x40012c00
 8002b70:	40000400 	.word	0x40000400

08002b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d122      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d11b      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0202 	mvn.w	r2, #2
 8002ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f9b1 	bl	8002f1e <HAL_TIM_IC_CaptureCallback>
 8002bbc:	e005      	b.n	8002bca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f9a4 	bl	8002f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f9b3 	bl	8002f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d122      	bne.n	8002c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d11b      	bne.n	8002c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f06f 0204 	mvn.w	r2, #4
 8002bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f987 	bl	8002f1e <HAL_TIM_IC_CaptureCallback>
 8002c10:	e005      	b.n	8002c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f97a 	bl	8002f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f989 	bl	8002f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d122      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d11b      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0208 	mvn.w	r2, #8
 8002c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f95d 	bl	8002f1e <HAL_TIM_IC_CaptureCallback>
 8002c64:	e005      	b.n	8002c72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f950 	bl	8002f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f95f 	bl	8002f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	2b10      	cmp	r3, #16
 8002c84:	d122      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b10      	cmp	r3, #16
 8002c92:	d11b      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0210 	mvn.w	r2, #16
 8002c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f933 	bl	8002f1e <HAL_TIM_IC_CaptureCallback>
 8002cb8:	e005      	b.n	8002cc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f926 	bl	8002f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f935 	bl	8002f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d10e      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d107      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0201 	mvn.w	r2, #1
 8002cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe fd5a 	bl	80017ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d02:	2b80      	cmp	r3, #128	; 0x80
 8002d04:	d10e      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d10:	2b80      	cmp	r3, #128	; 0x80
 8002d12:	d107      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fa67 	bl	80031f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2e:	2b40      	cmp	r3, #64	; 0x40
 8002d30:	d10e      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3c:	2b40      	cmp	r3, #64	; 0x40
 8002d3e:	d107      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f8f9 	bl	8002f42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b20      	cmp	r3, #32
 8002d5c:	d10e      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0320 	and.w	r3, r3, #32
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d107      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0220 	mvn.w	r2, #32
 8002d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fa32 	bl	80031e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_TIM_ConfigClockSource+0x18>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e0b3      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x180>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dc2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd4:	d03e      	beq.n	8002e54 <HAL_TIM_ConfigClockSource+0xd0>
 8002dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dda:	f200 8087 	bhi.w	8002eec <HAL_TIM_ConfigClockSource+0x168>
 8002dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de2:	f000 8085 	beq.w	8002ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8002de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dea:	d87f      	bhi.n	8002eec <HAL_TIM_ConfigClockSource+0x168>
 8002dec:	2b70      	cmp	r3, #112	; 0x70
 8002dee:	d01a      	beq.n	8002e26 <HAL_TIM_ConfigClockSource+0xa2>
 8002df0:	2b70      	cmp	r3, #112	; 0x70
 8002df2:	d87b      	bhi.n	8002eec <HAL_TIM_ConfigClockSource+0x168>
 8002df4:	2b60      	cmp	r3, #96	; 0x60
 8002df6:	d050      	beq.n	8002e9a <HAL_TIM_ConfigClockSource+0x116>
 8002df8:	2b60      	cmp	r3, #96	; 0x60
 8002dfa:	d877      	bhi.n	8002eec <HAL_TIM_ConfigClockSource+0x168>
 8002dfc:	2b50      	cmp	r3, #80	; 0x50
 8002dfe:	d03c      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0xf6>
 8002e00:	2b50      	cmp	r3, #80	; 0x50
 8002e02:	d873      	bhi.n	8002eec <HAL_TIM_ConfigClockSource+0x168>
 8002e04:	2b40      	cmp	r3, #64	; 0x40
 8002e06:	d058      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x136>
 8002e08:	2b40      	cmp	r3, #64	; 0x40
 8002e0a:	d86f      	bhi.n	8002eec <HAL_TIM_ConfigClockSource+0x168>
 8002e0c:	2b30      	cmp	r3, #48	; 0x30
 8002e0e:	d064      	beq.n	8002eda <HAL_TIM_ConfigClockSource+0x156>
 8002e10:	2b30      	cmp	r3, #48	; 0x30
 8002e12:	d86b      	bhi.n	8002eec <HAL_TIM_ConfigClockSource+0x168>
 8002e14:	2b20      	cmp	r3, #32
 8002e16:	d060      	beq.n	8002eda <HAL_TIM_ConfigClockSource+0x156>
 8002e18:	2b20      	cmp	r3, #32
 8002e1a:	d867      	bhi.n	8002eec <HAL_TIM_ConfigClockSource+0x168>
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d05c      	beq.n	8002eda <HAL_TIM_ConfigClockSource+0x156>
 8002e20:	2b10      	cmp	r3, #16
 8002e22:	d05a      	beq.n	8002eda <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e24:	e062      	b.n	8002eec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	6899      	ldr	r1, [r3, #8]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f000 f95c 	bl	80030f2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e48:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	609a      	str	r2, [r3, #8]
      break;
 8002e52:	e04e      	b.n	8002ef2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	6899      	ldr	r1, [r3, #8]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f000 f945 	bl	80030f2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e76:	609a      	str	r2, [r3, #8]
      break;
 8002e78:	e03b      	b.n	8002ef2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	6859      	ldr	r1, [r3, #4]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	461a      	mov	r2, r3
 8002e88:	f000 f8bc 	bl	8003004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2150      	movs	r1, #80	; 0x50
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 f913 	bl	80030be <TIM_ITRx_SetConfig>
      break;
 8002e98:	e02b      	b.n	8002ef2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	6859      	ldr	r1, [r3, #4]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f000 f8da 	bl	8003060 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2160      	movs	r1, #96	; 0x60
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 f903 	bl	80030be <TIM_ITRx_SetConfig>
      break;
 8002eb8:	e01b      	b.n	8002ef2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	6859      	ldr	r1, [r3, #4]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f000 f89c 	bl	8003004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2140      	movs	r1, #64	; 0x40
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 f8f3 	bl	80030be <TIM_ITRx_SetConfig>
      break;
 8002ed8:	e00b      	b.n	8002ef2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	f000 f8ea 	bl	80030be <TIM_ITRx_SetConfig>
        break;
 8002eea:	e002      	b.n	8002ef2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002eec:	bf00      	nop
 8002eee:	e000      	b.n	8002ef2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ef0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr

08002f1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a25      	ldr	r2, [pc, #148]	; (8002ffc <TIM_Base_SetConfig+0xa8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d007      	beq.n	8002f7c <TIM_Base_SetConfig+0x28>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f72:	d003      	beq.n	8002f7c <TIM_Base_SetConfig+0x28>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a22      	ldr	r2, [pc, #136]	; (8003000 <TIM_Base_SetConfig+0xac>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d108      	bne.n	8002f8e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a1a      	ldr	r2, [pc, #104]	; (8002ffc <TIM_Base_SetConfig+0xa8>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d007      	beq.n	8002fa6 <TIM_Base_SetConfig+0x52>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f9c:	d003      	beq.n	8002fa6 <TIM_Base_SetConfig+0x52>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a17      	ldr	r2, [pc, #92]	; (8003000 <TIM_Base_SetConfig+0xac>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d108      	bne.n	8002fb8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a07      	ldr	r2, [pc, #28]	; (8002ffc <TIM_Base_SetConfig+0xa8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d103      	bne.n	8002fec <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	615a      	str	r2, [r3, #20]
}
 8002ff2:	bf00      	nop
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr
 8002ffc:	40012c00 	.word	0x40012c00
 8003000:	40000400 	.word	0x40000400

08003004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	f023 0201 	bic.w	r2, r3, #1
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800302e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f023 030a 	bic.w	r3, r3, #10
 8003040:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4313      	orrs	r3, r2
 8003048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	621a      	str	r2, [r3, #32]
}
 8003056:	bf00      	nop
 8003058:	371c      	adds	r7, #28
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr

08003060 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	f023 0210 	bic.w	r2, r3, #16
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800308a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	031b      	lsls	r3, r3, #12
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	4313      	orrs	r3, r2
 8003094:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800309c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	621a      	str	r2, [r3, #32]
}
 80030b4:	bf00      	nop
 80030b6:	371c      	adds	r7, #28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr

080030be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030be:	b480      	push	{r7}
 80030c0:	b085      	sub	sp, #20
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4313      	orrs	r3, r2
 80030dc:	f043 0307 	orr.w	r3, r3, #7
 80030e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	609a      	str	r2, [r3, #8]
}
 80030e8:	bf00      	nop
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr

080030f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b087      	sub	sp, #28
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
 80030fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800310c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	021a      	lsls	r2, r3, #8
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	431a      	orrs	r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	4313      	orrs	r3, r2
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	609a      	str	r2, [r3, #8]
}
 8003126:	bf00      	nop
 8003128:	371c      	adds	r7, #28
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr

08003130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003144:	2302      	movs	r3, #2
 8003146:	e041      	b.n	80031cc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a14      	ldr	r2, [pc, #80]	; (80031d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d009      	beq.n	80031a0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003194:	d004      	beq.n	80031a0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a10      	ldr	r2, [pc, #64]	; (80031dc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d10c      	bne.n	80031ba <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40012c00 	.word	0x40012c00
 80031dc:	40000400 	.word	0x40000400

080031e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr

080031f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr

08003204 <__libc_init_array>:
 8003204:	b570      	push	{r4, r5, r6, lr}
 8003206:	2600      	movs	r6, #0
 8003208:	4d0c      	ldr	r5, [pc, #48]	; (800323c <__libc_init_array+0x38>)
 800320a:	4c0d      	ldr	r4, [pc, #52]	; (8003240 <__libc_init_array+0x3c>)
 800320c:	1b64      	subs	r4, r4, r5
 800320e:	10a4      	asrs	r4, r4, #2
 8003210:	42a6      	cmp	r6, r4
 8003212:	d109      	bne.n	8003228 <__libc_init_array+0x24>
 8003214:	f000 f822 	bl	800325c <_init>
 8003218:	2600      	movs	r6, #0
 800321a:	4d0a      	ldr	r5, [pc, #40]	; (8003244 <__libc_init_array+0x40>)
 800321c:	4c0a      	ldr	r4, [pc, #40]	; (8003248 <__libc_init_array+0x44>)
 800321e:	1b64      	subs	r4, r4, r5
 8003220:	10a4      	asrs	r4, r4, #2
 8003222:	42a6      	cmp	r6, r4
 8003224:	d105      	bne.n	8003232 <__libc_init_array+0x2e>
 8003226:	bd70      	pop	{r4, r5, r6, pc}
 8003228:	f855 3b04 	ldr.w	r3, [r5], #4
 800322c:	4798      	blx	r3
 800322e:	3601      	adds	r6, #1
 8003230:	e7ee      	b.n	8003210 <__libc_init_array+0xc>
 8003232:	f855 3b04 	ldr.w	r3, [r5], #4
 8003236:	4798      	blx	r3
 8003238:	3601      	adds	r6, #1
 800323a:	e7f2      	b.n	8003222 <__libc_init_array+0x1e>
 800323c:	08003294 	.word	0x08003294
 8003240:	08003294 	.word	0x08003294
 8003244:	08003294 	.word	0x08003294
 8003248:	08003298 	.word	0x08003298

0800324c <memset>:
 800324c:	4603      	mov	r3, r0
 800324e:	4402      	add	r2, r0
 8003250:	4293      	cmp	r3, r2
 8003252:	d100      	bne.n	8003256 <memset+0xa>
 8003254:	4770      	bx	lr
 8003256:	f803 1b01 	strb.w	r1, [r3], #1
 800325a:	e7f9      	b.n	8003250 <memset+0x4>

0800325c <_init>:
 800325c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325e:	bf00      	nop
 8003260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003262:	bc08      	pop	{r3}
 8003264:	469e      	mov	lr, r3
 8003266:	4770      	bx	lr

08003268 <_fini>:
 8003268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326a:	bf00      	nop
 800326c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326e:	bc08      	pop	{r3}
 8003270:	469e      	mov	lr, r3
 8003272:	4770      	bx	lr
